=begin
#Figshare API

#Figshare apiv2. Using Swagger 2.0

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class InstitutionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Public Licenses
    # Returns a list of articles belonging to the institution
    # @param institution_string_id 
    # @param resource_id 
    # @param filename 
    # @param [Hash] opts the optional parameters
    # @return [Array<Article>]
    def institution_articles(institution_string_id, resource_id, filename, opts = {})
      data, _status_code, _headers = institution_articles_with_http_info(institution_string_id, resource_id, filename, opts)
      return data
    end

    # Public Licenses
    # Returns a list of articles belonging to the institution
    # @param institution_string_id 
    # @param resource_id 
    # @param filename 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Article>, Fixnum, Hash)>] Array<Article> data, response status code and response headers
    def institution_articles_with_http_info(institution_string_id, resource_id, filename, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstitutionsApi.institution_articles ..."
      end
      # verify the required parameter 'institution_string_id' is set
      if @api_client.config.client_side_validation && institution_string_id.nil?
        fail ArgumentError, "Missing the required parameter 'institution_string_id' when calling InstitutionsApi.institution_articles"
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling InstitutionsApi.institution_articles"
      end
      # verify the required parameter 'filename' is set
      if @api_client.config.client_side_validation && filename.nil?
        fail ArgumentError, "Missing the required parameter 'filename' when calling InstitutionsApi.institution_articles"
      end
      # resource path
      local_var_path = "/institutions/{institution_string_id}/articles/filter-by".sub('{' + 'institution_string_id' + '}', institution_string_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'resource_id'] = resource_id
      query_params[:'filename'] = filename

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Article>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#institution_articles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Institution HRfeed Upload
    # More info in the <a href=\"#hr_feed\">HR Feed section</a>
    # @param [Hash] opts the optional parameters
    # @option opts [File] :hrfeed You can find an example in the Hr Feed section
    # @return [ResponseMessage]
    def institution_hrfeed_upload(opts = {})
      data, _status_code, _headers = institution_hrfeed_upload_with_http_info(opts)
      return data
    end

    # Private Institution HRfeed Upload
    # More info in the &lt;a href&#x3D;\&quot;#hr_feed\&quot;&gt;HR Feed section&lt;/a&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [File] :hrfeed You can find an example in the Hr Feed section
    # @return [Array<(ResponseMessage, Fixnum, Hash)>] ResponseMessage data, response status code and response headers
    def institution_hrfeed_upload_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstitutionsApi.institution_hrfeed_upload ..."
      end
      # resource path
      local_var_path = "/institution/hrfeed/upload"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["hrfeed"] = opts[:'hrfeed'] if !opts[:'hrfeed'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#institution_hrfeed_upload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Account Institution User
    # Retrieve institution user information using the account_id
    # @param account_id Account identifier the user is associated to
    # @param [Hash] opts the optional parameters
    # @return [User]
    def private_account_institution_user(account_id, opts = {})
      data, _status_code, _headers = private_account_institution_user_with_http_info(account_id, opts)
      return data
    end

    # Private Account Institution User
    # Retrieve institution user information using the account_id
    # @param account_id Account identifier the user is associated to
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def private_account_institution_user_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstitutionsApi.private_account_institution_user ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InstitutionsApi.private_account_institution_user"
      end
      if @api_client.config.client_side_validation && account_id < 1
        fail ArgumentError, 'invalid value for "account_id" when calling InstitutionsApi.private_account_institution_user, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/institution/users/{account_id}".sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#private_account_institution_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Account Categories
    # List institution categories (including parent Categories)
    # @param [Hash] opts the optional parameters
    # @return [Array<Category>]
    def private_categories_list(opts = {})
      data, _status_code, _headers = private_categories_list_with_http_info(opts)
      return data
    end

    # Private Account Categories
    # List institution categories (including parent Categories)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Category>, Fixnum, Hash)>] Array<Category> data, response status code and response headers
    def private_categories_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstitutionsApi.private_categories_list ..."
      end
      # resource path
      local_var_path = "/account/categories"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Category>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#private_categories_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Institution Account Group Role
    # Delete Institution Account Group Role
    # @param account_id Account identifier for which to remove the role
    # @param group_id Group identifier for which to remove the role
    # @param role_id Role identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_institution_account_group_role_delete(account_id, group_id, role_id, opts = {})
      private_institution_account_group_role_delete_with_http_info(account_id, group_id, role_id, opts)
      return nil
    end

    # Delete Institution Account Group Role
    # Delete Institution Account Group Role
    # @param account_id Account identifier for which to remove the role
    # @param group_id Group identifier for which to remove the role
    # @param role_id Role identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_institution_account_group_role_delete_with_http_info(account_id, group_id, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstitutionsApi.private_institution_account_group_role_delete ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InstitutionsApi.private_institution_account_group_role_delete"
      end
      if @api_client.config.client_side_validation && account_id < 1
        fail ArgumentError, 'invalid value for "account_id" when calling InstitutionsApi.private_institution_account_group_role_delete, must be greater than or equal to 1.'
      end

      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling InstitutionsApi.private_institution_account_group_role_delete"
      end
      if @api_client.config.client_side_validation && group_id < 1
        fail ArgumentError, 'invalid value for "group_id" when calling InstitutionsApi.private_institution_account_group_role_delete, must be greater than or equal to 1.'
      end

      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling InstitutionsApi.private_institution_account_group_role_delete"
      end
      if @api_client.config.client_side_validation && role_id < 1
        fail ArgumentError, 'invalid value for "role_id" when calling InstitutionsApi.private_institution_account_group_role_delete, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/institution/roles/{account_id}/{group_id}/{role_id}".sub('{' + 'account_id' + '}', account_id.to_s).sub('{' + 'group_id' + '}', group_id.to_s).sub('{' + 'role_id' + '}', role_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#private_institution_account_group_role_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Institution Account Group Roles
    # List Institution Account Group Roles
    # @param account_id Account identifier the user is associated to
    # @param [Hash] opts the optional parameters
    # @return [AccountGroupRoles]
    def private_institution_account_group_roles(account_id, opts = {})
      data, _status_code, _headers = private_institution_account_group_roles_with_http_info(account_id, opts)
      return data
    end

    # List Institution Account Group Roles
    # List Institution Account Group Roles
    # @param account_id Account identifier the user is associated to
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountGroupRoles, Fixnum, Hash)>] AccountGroupRoles data, response status code and response headers
    def private_institution_account_group_roles_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstitutionsApi.private_institution_account_group_roles ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InstitutionsApi.private_institution_account_group_roles"
      end
      if @api_client.config.client_side_validation && account_id < 1
        fail ArgumentError, 'invalid value for "account_id" when calling InstitutionsApi.private_institution_account_group_roles, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/institution/roles/{account_id}".sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountGroupRoles')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#private_institution_account_group_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Institution Account Group Roles
    # Add Institution Account Group Roles
    # @param account_id Account identifier the user is associated to
    # @param account Account description
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_institution_account_group_roles_create(account_id, account, opts = {})
      private_institution_account_group_roles_create_with_http_info(account_id, account, opts)
      return nil
    end

    # Add Institution Account Group Roles
    # Add Institution Account Group Roles
    # @param account_id Account identifier the user is associated to
    # @param account Account description
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_institution_account_group_roles_create_with_http_info(account_id, account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstitutionsApi.private_institution_account_group_roles_create ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InstitutionsApi.private_institution_account_group_roles_create"
      end
      if @api_client.config.client_side_validation && account_id < 1
        fail ArgumentError, 'invalid value for "account_id" when calling InstitutionsApi.private_institution_account_group_roles_create, must be greater than or equal to 1.'
      end

      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling InstitutionsApi.private_institution_account_group_roles_create"
      end
      # resource path
      local_var_path = "/account/institution/roles/{account_id}".sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(account)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#private_institution_account_group_roles_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new Institution Account
    # Create a new Account by sending account information
    # @param account Account description
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_institution_accounts_create(account, opts = {})
      private_institution_accounts_create_with_http_info(account, opts)
      return nil
    end

    # Create new Institution Account
    # Create a new Account by sending account information
    # @param account Account description
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_institution_accounts_create_with_http_info(account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstitutionsApi.private_institution_accounts_create ..."
      end
      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling InstitutionsApi.private_institution_accounts_create"
      end
      # resource path
      local_var_path = "/account/institution/accounts"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(account)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#private_institution_accounts_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Account Institution Accounts
    # Returns the accounts for which the account has administrative privileges (assigned and inherited).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page (default to 10)
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @option opts [Integer] :is_active Filter by active status
    # @option opts [String] :institution_user_id Filter by institution_user_id
    # @option opts [String] :email Filter by email
    # @return [Array<ShortAccount>]
    def private_institution_accounts_list(opts = {})
      data, _status_code, _headers = private_institution_accounts_list_with_http_info(opts)
      return data
    end

    # Private Account Institution Accounts
    # Returns the accounts for which the account has administrative privileges (assigned and inherited).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @option opts [Integer] :is_active Filter by active status
    # @option opts [String] :institution_user_id Filter by institution_user_id
    # @option opts [String] :email Filter by email
    # @return [Array<(Array<ShortAccount>, Fixnum, Hash)>] Array<ShortAccount> data, response status code and response headers
    def private_institution_accounts_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstitutionsApi.private_institution_accounts_list ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling InstitutionsApi.private_institution_accounts_list, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling InstitutionsApi.private_institution_accounts_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InstitutionsApi.private_institution_accounts_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InstitutionsApi.private_institution_accounts_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling InstitutionsApi.private_institution_accounts_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling InstitutionsApi.private_institution_accounts_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling InstitutionsApi.private_institution_accounts_list, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 1
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling InstitutionsApi.private_institution_accounts_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'is_active'].nil? && opts[:'is_active'] > 1
        fail ArgumentError, 'invalid value for "opts[:"is_active"]" when calling InstitutionsApi.private_institution_accounts_list, must be smaller than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'is_active'].nil? && opts[:'is_active'] < 0
        fail ArgumentError, 'invalid value for "opts[:"is_active"]" when calling InstitutionsApi.private_institution_accounts_list, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/account/institution/accounts"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'is_active'] = opts[:'is_active'] if !opts[:'is_active'].nil?
      query_params[:'institution_user_id'] = opts[:'institution_user_id'] if !opts[:'institution_user_id'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ShortAccount>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#private_institution_accounts_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Account Institution Accounts Search
    # Returns the accounts for which the account has administrative privileges (assigned and inherited).
    # @param search Search Parameters
    # @param [Hash] opts the optional parameters
    # @return [Array<ShortAccount>]
    def private_institution_accounts_search(search, opts = {})
      data, _status_code, _headers = private_institution_accounts_search_with_http_info(search, opts)
      return data
    end

    # Private Account Institution Accounts Search
    # Returns the accounts for which the account has administrative privileges (assigned and inherited).
    # @param search Search Parameters
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ShortAccount>, Fixnum, Hash)>] Array<ShortAccount> data, response status code and response headers
    def private_institution_accounts_search_with_http_info(search, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstitutionsApi.private_institution_accounts_search ..."
      end
      # verify the required parameter 'search' is set
      if @api_client.config.client_side_validation && search.nil?
        fail ArgumentError, "Missing the required parameter 'search' when calling InstitutionsApi.private_institution_accounts_search"
      end
      # resource path
      local_var_path = "/account/institution/accounts/search"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(search)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ShortAccount>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#private_institution_accounts_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Institution Account
    # Update Institution Account
    # @param account_id Account identifier the user is associated to
    # @param account Account description
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_institution_accounts_update(account_id, account, opts = {})
      private_institution_accounts_update_with_http_info(account_id, account, opts)
      return nil
    end

    # Update Institution Account
    # Update Institution Account
    # @param account_id Account identifier the user is associated to
    # @param account Account description
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_institution_accounts_update_with_http_info(account_id, account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstitutionsApi.private_institution_accounts_update ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InstitutionsApi.private_institution_accounts_update"
      end
      if @api_client.config.client_side_validation && account_id < 1
        fail ArgumentError, 'invalid value for "account_id" when calling InstitutionsApi.private_institution_accounts_update, must be greater than or equal to 1.'
      end

      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling InstitutionsApi.private_institution_accounts_update"
      end
      # resource path
      local_var_path = "/account/institution/accounts/{account_id}".sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(account)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#private_institution_accounts_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Institution Articles
    # Get Articles from own institution. User must be administrator of the institution
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page (default to 10)
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @option opts [String] :order The field by which to order. Default varies by endpoint/resource. (default to published_date)
    # @option opts [String] :order_direction  (default to desc)
    # @option opts [String] :published_since Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    # @option opts [String] :modified_since Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    # @option opts [Integer] :status only return collections with this status
    # @option opts [String] :resource_doi only return collections with this resource_doi
    # @option opts [Integer] :item_type Only return collections with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 4 - Fileset, 5 - Poster, 6 - Paper, 7 - Presentation, 8 - Thesis, 9 - Code, 12 - Preprint
    # @return [Array<Article>]
    def private_institution_articles(opts = {})
      data, _status_code, _headers = private_institution_articles_with_http_info(opts)
      return data
    end

    # Private Institution Articles
    # Get Articles from own institution. User must be administrator of the institution
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @option opts [String] :order The field by which to order. Default varies by endpoint/resource.
    # @option opts [String] :order_direction 
    # @option opts [String] :published_since Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    # @option opts [String] :modified_since Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    # @option opts [Integer] :status only return collections with this status
    # @option opts [String] :resource_doi only return collections with this resource_doi
    # @option opts [Integer] :item_type Only return collections with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 4 - Fileset, 5 - Poster, 6 - Paper, 7 - Presentation, 8 - Thesis, 9 - Code, 12 - Preprint
    # @return [Array<(Array<Article>, Fixnum, Hash)>] Array<Article> data, response status code and response headers
    def private_institution_articles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstitutionsApi.private_institution_articles ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling InstitutionsApi.private_institution_articles, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling InstitutionsApi.private_institution_articles, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InstitutionsApi.private_institution_articles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InstitutionsApi.private_institution_articles, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling InstitutionsApi.private_institution_articles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling InstitutionsApi.private_institution_articles, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling InstitutionsApi.private_institution_articles, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 1
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling InstitutionsApi.private_institution_articles, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && opts[:'order'] && !['published_date', 'modified_date', 'views', 'shares', 'downloads', 'cites'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of published_date, modified_date, views, shares, downloads, cites'
      end
      if @api_client.config.client_side_validation && opts[:'order_direction'] && !['asc', 'desc'].include?(opts[:'order_direction'])
        fail ArgumentError, 'invalid value for "order_direction", must be one of asc, desc'
      end
      if @api_client.config.client_side_validation && !opts[:'item_type'].nil? && opts[:'item_type'] > 12
        fail ArgumentError, 'invalid value for "opts[:"item_type"]" when calling InstitutionsApi.private_institution_articles, must be smaller than or equal to 12.'
      end

      if @api_client.config.client_side_validation && !opts[:'item_type'].nil? && opts[:'item_type'] < 1
        fail ArgumentError, 'invalid value for "opts[:"item_type"]" when calling InstitutionsApi.private_institution_articles, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/institution/articles"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'order_direction'] = opts[:'order_direction'] if !opts[:'order_direction'].nil?
      query_params[:'published_since'] = opts[:'published_since'] if !opts[:'published_since'].nil?
      query_params[:'modified_since'] = opts[:'modified_since'] if !opts[:'modified_since'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'resource_doi'] = opts[:'resource_doi'] if !opts[:'resource_doi'].nil?
      query_params[:'item_type'] = opts[:'item_type'] if !opts[:'item_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Article>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#private_institution_articles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Account Institutions
    # Account institution details
    # @param [Hash] opts the optional parameters
    # @return [Institution]
    def private_institution_details(opts = {})
      data, _status_code, _headers = private_institution_details_with_http_info(opts)
      return data
    end

    # Private Account Institutions
    # Account institution details
    # @param [Hash] opts the optional parameters
    # @return [Array<(Institution, Fixnum, Hash)>] Institution data, response status code and response headers
    def private_institution_details_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstitutionsApi.private_institution_details ..."
      end
      # resource path
      local_var_path = "/account/institution"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Institution')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#private_institution_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Account Institution Groups
    # Returns the groups for which the account has administrative privileges (assigned and inherited).
    # @param [Hash] opts the optional parameters
    # @return [Array<Group>]
    def private_institution_groups_list(opts = {})
      data, _status_code, _headers = private_institution_groups_list_with_http_info(opts)
      return data
    end

    # Private Account Institution Groups
    # Returns the groups for which the account has administrative privileges (assigned and inherited).
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Group>, Fixnum, Hash)>] Array<Group> data, response status code and response headers
    def private_institution_groups_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstitutionsApi.private_institution_groups_list ..."
      end
      # resource path
      local_var_path = "/account/institution/groups"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Group>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#private_institution_groups_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Account Institution Roles
    # Returns the roles available for groups and the institution group.
    # @param [Hash] opts the optional parameters
    # @return [Array<Role>]
    def private_institution_roles_list(opts = {})
      data, _status_code, _headers = private_institution_roles_list_with_http_info(opts)
      return data
    end

    # Private Account Institution Roles
    # Returns the roles available for groups and the institution group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Role>, Fixnum, Hash)>] Array<Role> data, response status code and response headers
    def private_institution_roles_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstitutionsApi.private_institution_roles_list ..."
      end
      # resource path
      local_var_path = "/account/institution/roles"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Role>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#private_institution_roles_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
