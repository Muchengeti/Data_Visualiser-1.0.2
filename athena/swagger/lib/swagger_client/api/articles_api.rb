=begin
#Figshare API

#Figshare apiv2. Using Swagger 2.0

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class ArticlesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # View article details
    # View an article
    # @param article_id Article Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [ArticleComplete]
    def article_details(article_id, opts = {})
      data, _status_code, _headers = article_details_with_http_info(article_id, opts)
      return data
    end

    # View article details
    # View an article
    # @param article_id Article Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ArticleComplete, Fixnum, Hash)>] ArticleComplete data, response status code and response headers
    def article_details_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.article_details ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.article_details"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.article_details, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/articles/{article_id}".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ArticleComplete')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#article_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Article file details
    # File by id
    # @param article_id Article Unique identifier
    # @param file_id File Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [PublicFile]
    def article_file_details(article_id, file_id, opts = {})
      data, _status_code, _headers = article_file_details_with_http_info(article_id, file_id, opts)
      return data
    end

    # Article file details
    # File by id
    # @param article_id Article Unique identifier
    # @param file_id File Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicFile, Fixnum, Hash)>] PublicFile data, response status code and response headers
    def article_file_details_with_http_info(article_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.article_file_details ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.article_file_details"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.article_file_details, must be greater than or equal to 1.'
      end

      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling ArticlesApi.article_file_details"
      end
      if @api_client.config.client_side_validation && file_id < 1
        fail ArgumentError, 'invalid value for "file_id" when calling ArticlesApi.article_file_details, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/articles/{article_id}/files/{file_id}".sub('{' + 'article_id' + '}', article_id.to_s).sub('{' + 'file_id' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#article_file_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List article files
    # Files list for article
    # @param article_id Article Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<PublicFile>]
    def article_files(article_id, opts = {})
      data, _status_code, _headers = article_files_with_http_info(article_id, opts)
      return data
    end

    # List article files
    # Files list for article
    # @param article_id Article Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PublicFile>, Fixnum, Hash)>] Array<PublicFile> data, response status code and response headers
    def article_files_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.article_files ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.article_files"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.article_files, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/articles/{article_id}/files".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PublicFile>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#article_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Public Article Confidentiality for article version
    # Confidentiality for article version
    # @param article_id Article Unique identifier
    # @param v_number Version Number
    # @param [Hash] opts the optional parameters
    # @return [ArticleConfidentiality]
    def article_version_confidentiality(article_id, v_number, opts = {})
      data, _status_code, _headers = article_version_confidentiality_with_http_info(article_id, v_number, opts)
      return data
    end

    # Public Article Confidentiality for article version
    # Confidentiality for article version
    # @param article_id Article Unique identifier
    # @param v_number Version Number
    # @param [Hash] opts the optional parameters
    # @return [Array<(ArticleConfidentiality, Fixnum, Hash)>] ArticleConfidentiality data, response status code and response headers
    def article_version_confidentiality_with_http_info(article_id, v_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.article_version_confidentiality ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.article_version_confidentiality"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.article_version_confidentiality, must be greater than or equal to 1.'
      end

      # verify the required parameter 'v_number' is set
      if @api_client.config.client_side_validation && v_number.nil?
        fail ArgumentError, "Missing the required parameter 'v_number' when calling ArticlesApi.article_version_confidentiality"
      end
      if @api_client.config.client_side_validation && v_number < 1
        fail ArgumentError, 'invalid value for "v_number" when calling ArticlesApi.article_version_confidentiality, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/articles/{article_id}/versions/{v_number}/confidentiality".sub('{' + 'article_id' + '}', article_id.to_s).sub('{' + 'v_number' + '}', v_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ArticleConfidentiality')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#article_version_confidentiality\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Article details for version
    # Article with specified version
    # @param article_id Article Unique identifier
    # @param v_number Article Version Number
    # @param [Hash] opts the optional parameters
    # @return [ArticleComplete]
    def article_version_details(article_id, v_number, opts = {})
      data, _status_code, _headers = article_version_details_with_http_info(article_id, v_number, opts)
      return data
    end

    # Article details for version
    # Article with specified version
    # @param article_id Article Unique identifier
    # @param v_number Article Version Number
    # @param [Hash] opts the optional parameters
    # @return [Array<(ArticleComplete, Fixnum, Hash)>] ArticleComplete data, response status code and response headers
    def article_version_details_with_http_info(article_id, v_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.article_version_details ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.article_version_details"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.article_version_details, must be greater than or equal to 1.'
      end

      # verify the required parameter 'v_number' is set
      if @api_client.config.client_side_validation && v_number.nil?
        fail ArgumentError, "Missing the required parameter 'v_number' when calling ArticlesApi.article_version_details"
      end
      if @api_client.config.client_side_validation && v_number < 1
        fail ArgumentError, 'invalid value for "v_number" when calling ArticlesApi.article_version_details, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/articles/{article_id}/versions/{v_number}".sub('{' + 'article_id' + '}', article_id.to_s).sub('{' + 'v_number' + '}', v_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ArticleComplete')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#article_version_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Public Article Embargo for article version
    # Embargo for article version
    # @param article_id Article Unique identifier
    # @param v_number Version Number
    # @param [Hash] opts the optional parameters
    # @return [ArticleEmbargo]
    def article_version_embargo(article_id, v_number, opts = {})
      data, _status_code, _headers = article_version_embargo_with_http_info(article_id, v_number, opts)
      return data
    end

    # Public Article Embargo for article version
    # Embargo for article version
    # @param article_id Article Unique identifier
    # @param v_number Version Number
    # @param [Hash] opts the optional parameters
    # @return [Array<(ArticleEmbargo, Fixnum, Hash)>] ArticleEmbargo data, response status code and response headers
    def article_version_embargo_with_http_info(article_id, v_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.article_version_embargo ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.article_version_embargo"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.article_version_embargo, must be greater than or equal to 1.'
      end

      # verify the required parameter 'v_number' is set
      if @api_client.config.client_side_validation && v_number.nil?
        fail ArgumentError, "Missing the required parameter 'v_number' when calling ArticlesApi.article_version_embargo"
      end
      if @api_client.config.client_side_validation && v_number < 1
        fail ArgumentError, 'invalid value for "v_number" when calling ArticlesApi.article_version_embargo, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/articles/{article_id}/versions/{v_number}/embargo".sub('{' + 'article_id' + '}', article_id.to_s).sub('{' + 'v_number' + '}', v_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ArticleEmbargo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#article_version_embargo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List article versions
    # List public article versions
    # @param article_id Article Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<Version>]
    def article_versions(article_id, opts = {})
      data, _status_code, _headers = article_versions_with_http_info(article_id, opts)
      return data
    end

    # List article versions
    # List public article versions
    # @param article_id Article Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Version>, Fixnum, Hash)>] Array<Version> data, response status code and response headers
    def article_versions_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.article_versions ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.article_versions"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.article_versions, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/articles/{article_id}/versions".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Version>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#article_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Public Articles
    # Returns a list of public articles
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page (default to 10)
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @option opts [String] :order The field by which to order. Default varies by endpoint/resource. (default to published_date)
    # @option opts [String] :order_direction  (default to desc)
    # @option opts [Integer] :institution only return collections from this institution
    # @option opts [String] :published_since Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    # @option opts [String] :modified_since Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    # @option opts [Integer] :group only return collections from this group
    # @option opts [String] :resource_doi only return collections with this resource_doi
    # @option opts [Integer] :item_type Only return collections with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 4 - Fileset, 5 - Poster, 6 - Paper, 7 - Presentation, 8 - Thesis, 9 - Code, 12 - Preprint
    # @option opts [String] :doi only return collections with this doi
    # @return [Array<Article>]
    def articles_list(opts = {})
      data, _status_code, _headers = articles_list_with_http_info(opts)
      return data
    end

    # Public Articles
    # Returns a list of public articles
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @option opts [String] :order The field by which to order. Default varies by endpoint/resource.
    # @option opts [String] :order_direction 
    # @option opts [Integer] :institution only return collections from this institution
    # @option opts [String] :published_since Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    # @option opts [String] :modified_since Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    # @option opts [Integer] :group only return collections from this group
    # @option opts [String] :resource_doi only return collections with this resource_doi
    # @option opts [Integer] :item_type Only return collections with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 4 - Fileset, 5 - Poster, 6 - Paper, 7 - Presentation, 8 - Thesis, 9 - Code, 12 - Preprint
    # @option opts [String] :doi only return collections with this doi
    # @return [Array<(Array<Article>, Fixnum, Hash)>] Array<Article> data, response status code and response headers
    def articles_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.articles_list ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ArticlesApi.articles_list, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ArticlesApi.articles_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ArticlesApi.articles_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ArticlesApi.articles_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ArticlesApi.articles_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ArticlesApi.articles_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ArticlesApi.articles_list, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 1
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ArticlesApi.articles_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && opts[:'order'] && !['published_date', 'modified_date', 'views', 'shares', 'downloads', 'cites'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of published_date, modified_date, views, shares, downloads, cites'
      end
      if @api_client.config.client_side_validation && opts[:'order_direction'] && !['asc', 'desc'].include?(opts[:'order_direction'])
        fail ArgumentError, 'invalid value for "order_direction", must be one of asc, desc'
      end
      if @api_client.config.client_side_validation && !opts[:'item_type'].nil? && opts[:'item_type'] > 12
        fail ArgumentError, 'invalid value for "opts[:"item_type"]" when calling ArticlesApi.articles_list, must be smaller than or equal to 12.'
      end

      if @api_client.config.client_side_validation && !opts[:'item_type'].nil? && opts[:'item_type'] < 1
        fail ArgumentError, 'invalid value for "opts[:"item_type"]" when calling ArticlesApi.articles_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/articles"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'order_direction'] = opts[:'order_direction'] if !opts[:'order_direction'].nil?
      query_params[:'institution'] = opts[:'institution'] if !opts[:'institution'].nil?
      query_params[:'published_since'] = opts[:'published_since'] if !opts[:'published_since'].nil?
      query_params[:'modified_since'] = opts[:'modified_since'] if !opts[:'modified_since'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'resource_doi'] = opts[:'resource_doi'] if !opts[:'resource_doi'].nil?
      query_params[:'item_type'] = opts[:'item_type'] if !opts[:'item_type'].nil?
      query_params[:'doi'] = opts[:'doi'] if !opts[:'doi'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Article>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#articles_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Public Articles Search
    # Returns a list of public articles, filtered by the search parameters
    # @param [Hash] opts the optional parameters
    # @option opts [ArticleSearch] :search Search Parameters
    # @return [Array<Article>]
    def articles_search(opts = {})
      data, _status_code, _headers = articles_search_with_http_info(opts)
      return data
    end

    # Public Articles Search
    # Returns a list of public articles, filtered by the search parameters
    # @param [Hash] opts the optional parameters
    # @option opts [ArticleSearch] :search Search Parameters
    # @return [Array<(Array<Article>, Fixnum, Hash)>] Array<Article> data, response status code and response headers
    def articles_search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.articles_search ..."
      end
      # resource path
      local_var_path = "/articles/search"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'search'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Article>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#articles_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete article author
    # De-associate author from article
    # @param article_id Article unique identifier
    # @param author_id Article Author unique identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_article_author_delete(article_id, author_id, opts = {})
      private_article_author_delete_with_http_info(article_id, author_id, opts)
      return nil
    end

    # Delete article author
    # De-associate author from article
    # @param article_id Article unique identifier
    # @param author_id Article Author unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_article_author_delete_with_http_info(article_id, author_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_author_delete ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_author_delete"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_author_delete, must be greater than or equal to 1.'
      end

      # verify the required parameter 'author_id' is set
      if @api_client.config.client_side_validation && author_id.nil?
        fail ArgumentError, "Missing the required parameter 'author_id' when calling ArticlesApi.private_article_author_delete"
      end
      if @api_client.config.client_side_validation && author_id < 1
        fail ArgumentError, 'invalid value for "author_id" when calling ArticlesApi.private_article_author_delete, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}/authors/{author_id}".sub('{' + 'article_id' + '}', article_id.to_s).sub('{' + 'author_id' + '}', author_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_author_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add article authors
    # Associate new authors with the article. This will add new authors to the list of already associated authors
    # @param article_id Article unique identifier
    # @param authors Authors description
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_article_authors_add(article_id, authors, opts = {})
      private_article_authors_add_with_http_info(article_id, authors, opts)
      return nil
    end

    # Add article authors
    # Associate new authors with the article. This will add new authors to the list of already associated authors
    # @param article_id Article unique identifier
    # @param authors Authors description
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_article_authors_add_with_http_info(article_id, authors, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_authors_add ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_authors_add"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_authors_add, must be greater than or equal to 1.'
      end

      # verify the required parameter 'authors' is set
      if @api_client.config.client_side_validation && authors.nil?
        fail ArgumentError, "Missing the required parameter 'authors' when calling ArticlesApi.private_article_authors_add"
      end
      # resource path
      local_var_path = "/account/articles/{article_id}/authors".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(authors)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_authors_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List article authors
    # List article authors
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<Author>]
    def private_article_authors_list(article_id, opts = {})
      data, _status_code, _headers = private_article_authors_list_with_http_info(article_id, opts)
      return data
    end

    # List article authors
    # List article authors
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Author>, Fixnum, Hash)>] Array<Author> data, response status code and response headers
    def private_article_authors_list_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_authors_list ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_authors_list"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_authors_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}/authors".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Author>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_authors_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace article authors
    # Associate new authors with the article. This will remove all already associated authors and add these new ones
    # @param article_id Article unique identifier
    # @param authors Authors description
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_article_authors_replace(article_id, authors, opts = {})
      private_article_authors_replace_with_http_info(article_id, authors, opts)
      return nil
    end

    # Replace article authors
    # Associate new authors with the article. This will remove all already associated authors and add these new ones
    # @param article_id Article unique identifier
    # @param authors Authors description
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_article_authors_replace_with_http_info(article_id, authors, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_authors_replace ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_authors_replace"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_authors_replace, must be greater than or equal to 1.'
      end

      # verify the required parameter 'authors' is set
      if @api_client.config.client_side_validation && authors.nil?
        fail ArgumentError, "Missing the required parameter 'authors' when calling ArticlesApi.private_article_authors_replace"
      end
      # resource path
      local_var_path = "/account/articles/{article_id}/authors".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(authors)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_authors_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add article categories
    # Associate new categories with the article. This will add new categories to the list of already associated categories
    # @param article_id Article unique identifier
    # @param categories 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_article_categories_add(article_id, categories, opts = {})
      private_article_categories_add_with_http_info(article_id, categories, opts)
      return nil
    end

    # Add article categories
    # Associate new categories with the article. This will add new categories to the list of already associated categories
    # @param article_id Article unique identifier
    # @param categories 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_article_categories_add_with_http_info(article_id, categories, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_categories_add ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_categories_add"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_categories_add, must be greater than or equal to 1.'
      end

      # verify the required parameter 'categories' is set
      if @api_client.config.client_side_validation && categories.nil?
        fail ArgumentError, "Missing the required parameter 'categories' when calling ArticlesApi.private_article_categories_add"
      end
      # resource path
      local_var_path = "/account/articles/{article_id}/categories".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(categories)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_categories_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List article categories
    # List article categories
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<Category>]
    def private_article_categories_list(article_id, opts = {})
      data, _status_code, _headers = private_article_categories_list_with_http_info(article_id, opts)
      return data
    end

    # List article categories
    # List article categories
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Category>, Fixnum, Hash)>] Array<Category> data, response status code and response headers
    def private_article_categories_list_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_categories_list ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_categories_list"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_categories_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}/categories".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Category>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_categories_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace article categories
    # Associate new categories with the article. This will remove all already associated categories and add these new ones
    # @param article_id Article unique identifier
    # @param categories 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_article_categories_replace(article_id, categories, opts = {})
      private_article_categories_replace_with_http_info(article_id, categories, opts)
      return nil
    end

    # Replace article categories
    # Associate new categories with the article. This will remove all already associated categories and add these new ones
    # @param article_id Article unique identifier
    # @param categories 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_article_categories_replace_with_http_info(article_id, categories, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_categories_replace ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_categories_replace"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_categories_replace, must be greater than or equal to 1.'
      end

      # verify the required parameter 'categories' is set
      if @api_client.config.client_side_validation && categories.nil?
        fail ArgumentError, "Missing the required parameter 'categories' when calling ArticlesApi.private_article_categories_replace"
      end
      # resource path
      local_var_path = "/account/articles/{article_id}/categories".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(categories)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_categories_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete article category
    # De-associate category from article
    # @param article_id Article unique identifier
    # @param category_id Category unique identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_article_category_delete(article_id, category_id, opts = {})
      private_article_category_delete_with_http_info(article_id, category_id, opts)
      return nil
    end

    # Delete article category
    # De-associate category from article
    # @param article_id Article unique identifier
    # @param category_id Category unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_article_category_delete_with_http_info(article_id, category_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_category_delete ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_category_delete"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_category_delete, must be greater than or equal to 1.'
      end

      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling ArticlesApi.private_article_category_delete"
      end
      if @api_client.config.client_side_validation && category_id < 1
        fail ArgumentError, 'invalid value for "category_id" when calling ArticlesApi.private_article_category_delete, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}/categories/{category_id}".sub('{' + 'article_id' + '}', article_id.to_s).sub('{' + 'category_id' + '}', category_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_category_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete article confidentiality
    # Delete confidentiality settings
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_article_confidentiality_delete(article_id, opts = {})
      private_article_confidentiality_delete_with_http_info(article_id, opts)
      return nil
    end

    # Delete article confidentiality
    # Delete confidentiality settings
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_article_confidentiality_delete_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_confidentiality_delete ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_confidentiality_delete"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_confidentiality_delete, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}/confidentiality".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_confidentiality_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Article confidentiality details
    # View confidentiality settings
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [ArticleConfidentiality]
    def private_article_confidentiality_details(article_id, opts = {})
      data, _status_code, _headers = private_article_confidentiality_details_with_http_info(article_id, opts)
      return data
    end

    # Article confidentiality details
    # View confidentiality settings
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ArticleConfidentiality, Fixnum, Hash)>] ArticleConfidentiality data, response status code and response headers
    def private_article_confidentiality_details_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_confidentiality_details ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_confidentiality_details"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_confidentiality_details, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}/confidentiality".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ArticleConfidentiality')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_confidentiality_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update article confidentiality
    # Update confidentiality settings
    # @param article_id Article unique identifier
    # @param reason 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_article_confidentiality_update(article_id, reason, opts = {})
      private_article_confidentiality_update_with_http_info(article_id, reason, opts)
      return nil
    end

    # Update article confidentiality
    # Update confidentiality settings
    # @param article_id Article unique identifier
    # @param reason 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_article_confidentiality_update_with_http_info(article_id, reason, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_confidentiality_update ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_confidentiality_update"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_confidentiality_update, must be greater than or equal to 1.'
      end

      # verify the required parameter 'reason' is set
      if @api_client.config.client_side_validation && reason.nil?
        fail ArgumentError, "Missing the required parameter 'reason' when calling ArticlesApi.private_article_confidentiality_update"
      end
      # resource path
      local_var_path = "/account/articles/{article_id}/confidentiality".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reason)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_confidentiality_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new Article
    # Create a new Article by sending article information
    # @param article Article description
    # @param [Hash] opts the optional parameters
    # @return [Location]
    def private_article_create(article, opts = {})
      data, _status_code, _headers = private_article_create_with_http_info(article, opts)
      return data
    end

    # Create new Article
    # Create a new Article by sending article information
    # @param article Article description
    # @param [Hash] opts the optional parameters
    # @return [Array<(Location, Fixnum, Hash)>] Location data, response status code and response headers
    def private_article_create_with_http_info(article, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_create ..."
      end
      # verify the required parameter 'article' is set
      if @api_client.config.client_side_validation && article.nil?
        fail ArgumentError, "Missing the required parameter 'article' when calling ArticlesApi.private_article_create"
      end
      # resource path
      local_var_path = "/account/articles"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(article)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Location')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete article
    # Delete an article
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_article_delete(article_id, opts = {})
      private_article_delete_with_http_info(article_id, opts)
      return nil
    end

    # Delete article
    # Delete an article
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_article_delete_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_delete ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_delete"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_delete, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Article details
    # View a private article
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [ArticleCompletePrivate]
    def private_article_details(article_id, opts = {})
      data, _status_code, _headers = private_article_details_with_http_info(article_id, opts)
      return data
    end

    # Article details
    # View a private article
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ArticleCompletePrivate, Fixnum, Hash)>] ArticleCompletePrivate data, response status code and response headers
    def private_article_details_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_details ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_details"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_details, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ArticleCompletePrivate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Article Embargo
    # Will lift the embargo for the specified article
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_article_embargo_delete(article_id, opts = {})
      private_article_embargo_delete_with_http_info(article_id, opts)
      return nil
    end

    # Delete Article Embargo
    # Will lift the embargo for the specified article
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_article_embargo_delete_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_embargo_delete ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_embargo_delete"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_embargo_delete, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}/embargo".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_embargo_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Article Embargo Details
    # View a private article embargo details
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [ArticleEmbargo]
    def private_article_embargo_details(article_id, opts = {})
      data, _status_code, _headers = private_article_embargo_details_with_http_info(article_id, opts)
      return data
    end

    # Article Embargo Details
    # View a private article embargo details
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ArticleEmbargo, Fixnum, Hash)>] ArticleEmbargo data, response status code and response headers
    def private_article_embargo_details_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_embargo_details ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_embargo_details"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_embargo_details, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}/embargo".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ArticleEmbargo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_embargo_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Article Embargo
    # Note: setting an article under whole embargo does not imply that the article will be published when the embargo will expire. You must explicitly call the publish endpoint to enable this functionality.
    # @param article_id Article unique identifier
    # @param embargo Embargo description
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_article_embargo_update(article_id, embargo, opts = {})
      private_article_embargo_update_with_http_info(article_id, embargo, opts)
      return nil
    end

    # Update Article Embargo
    # Note: setting an article under whole embargo does not imply that the article will be published when the embargo will expire. You must explicitly call the publish endpoint to enable this functionality.
    # @param article_id Article unique identifier
    # @param embargo Embargo description
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_article_embargo_update_with_http_info(article_id, embargo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_embargo_update ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_embargo_update"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_embargo_update, must be greater than or equal to 1.'
      end

      # verify the required parameter 'embargo' is set
      if @api_client.config.client_side_validation && embargo.nil?
        fail ArgumentError, "Missing the required parameter 'embargo' when calling ArticlesApi.private_article_embargo_update"
      end
      # resource path
      local_var_path = "/account/articles/{article_id}/embargo".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(embargo)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_embargo_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Single File
    # View details of file for specified article
    # @param article_id Article unique identifier
    # @param file_id File unique identifier
    # @param [Hash] opts the optional parameters
    # @return [PrivateFile]
    def private_article_file(article_id, file_id, opts = {})
      data, _status_code, _headers = private_article_file_with_http_info(article_id, file_id, opts)
      return data
    end

    # Single File
    # View details of file for specified article
    # @param article_id Article unique identifier
    # @param file_id File unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrivateFile, Fixnum, Hash)>] PrivateFile data, response status code and response headers
    def private_article_file_with_http_info(article_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_file ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_file"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_file, must be greater than or equal to 1.'
      end

      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling ArticlesApi.private_article_file"
      end
      if @api_client.config.client_side_validation && file_id < 1
        fail ArgumentError, 'invalid value for "file_id" when calling ArticlesApi.private_article_file, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}/files/{file_id}".sub('{' + 'article_id' + '}', article_id.to_s).sub('{' + 'file_id' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PrivateFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # File Delete
    # Complete file upload
    # @param article_id Article unique identifier
    # @param file_id File unique identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_article_file_delete(article_id, file_id, opts = {})
      private_article_file_delete_with_http_info(article_id, file_id, opts)
      return nil
    end

    # File Delete
    # Complete file upload
    # @param article_id Article unique identifier
    # @param file_id File unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_article_file_delete_with_http_info(article_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_file_delete ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_file_delete"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_file_delete, must be greater than or equal to 1.'
      end

      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling ArticlesApi.private_article_file_delete"
      end
      if @api_client.config.client_side_validation && file_id < 1
        fail ArgumentError, 'invalid value for "file_id" when calling ArticlesApi.private_article_file_delete, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}/files/{file_id}".sub('{' + 'article_id' + '}', article_id.to_s).sub('{' + 'file_id' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_file_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List article files
    # List private files
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<PrivateFile>]
    def private_article_files_list(article_id, opts = {})
      data, _status_code, _headers = private_article_files_list_with_http_info(article_id, opts)
      return data
    end

    # List article files
    # List private files
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PrivateFile>, Fixnum, Hash)>] Array<PrivateFile> data, response status code and response headers
    def private_article_files_list_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_files_list ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_files_list"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_files_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}/files".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PrivateFile>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_files_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List private links
    # List private links
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<PrivateLink>]
    def private_article_private_link(article_id, opts = {})
      data, _status_code, _headers = private_article_private_link_with_http_info(article_id, opts)
      return data
    end

    # List private links
    # List private links
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PrivateLink>, Fixnum, Hash)>] Array<PrivateLink> data, response status code and response headers
    def private_article_private_link_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_private_link ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_private_link"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_private_link, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}/private_links".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PrivateLink>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_private_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create private link
    # Create new private link for this article
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [PrivateLinkCreator] :private_link 
    # @return [Location]
    def private_article_private_link_create(article_id, opts = {})
      data, _status_code, _headers = private_article_private_link_create_with_http_info(article_id, opts)
      return data
    end

    # Create private link
    # Create new private link for this article
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [PrivateLinkCreator] :private_link 
    # @return [Array<(Location, Fixnum, Hash)>] Location data, response status code and response headers
    def private_article_private_link_create_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_private_link_create ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_private_link_create"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_private_link_create, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}/private_links".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'private_link'])
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Location')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_private_link_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable private link
    # Disable/delete private link for this article
    # @param article_id Article unique identifier
    # @param link_id Private link token
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_article_private_link_delete(article_id, link_id, opts = {})
      private_article_private_link_delete_with_http_info(article_id, link_id, opts)
      return nil
    end

    # Disable private link
    # Disable/delete private link for this article
    # @param article_id Article unique identifier
    # @param link_id Private link token
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_article_private_link_delete_with_http_info(article_id, link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_private_link_delete ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_private_link_delete"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_private_link_delete, must be greater than or equal to 1.'
      end

      # verify the required parameter 'link_id' is set
      if @api_client.config.client_side_validation && link_id.nil?
        fail ArgumentError, "Missing the required parameter 'link_id' when calling ArticlesApi.private_article_private_link_delete"
      end
      # resource path
      local_var_path = "/account/articles/{article_id}/private_links/{link_id}".sub('{' + 'article_id' + '}', article_id.to_s).sub('{' + 'link_id' + '}', link_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_private_link_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update private link
    # Update existing private link for this article
    # @param article_id Article unique identifier
    # @param link_id Private link token
    # @param [Hash] opts the optional parameters
    # @option opts [PrivateLinkCreator] :private_link 
    # @return [nil]
    def private_article_private_link_update(article_id, link_id, opts = {})
      private_article_private_link_update_with_http_info(article_id, link_id, opts)
      return nil
    end

    # Update private link
    # Update existing private link for this article
    # @param article_id Article unique identifier
    # @param link_id Private link token
    # @param [Hash] opts the optional parameters
    # @option opts [PrivateLinkCreator] :private_link 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_article_private_link_update_with_http_info(article_id, link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_private_link_update ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_private_link_update"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_private_link_update, must be greater than or equal to 1.'
      end

      # verify the required parameter 'link_id' is set
      if @api_client.config.client_side_validation && link_id.nil?
        fail ArgumentError, "Missing the required parameter 'link_id' when calling ArticlesApi.private_article_private_link_update"
      end
      # resource path
      local_var_path = "/account/articles/{article_id}/private_links/{link_id}".sub('{' + 'article_id' + '}', article_id.to_s).sub('{' + 'link_id' + '}', link_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'private_link'])
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_private_link_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Article Publish
    # - If the whole article is under embargo, it will not be published immediatly, but when the embargo expires or is lifted. - When an article is published, a new public version will be generated. Any further updates to the article will affect the private article data. In order to make these changes publicly visible, an explicit publish operation is needed.
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Location]
    def private_article_publish(article_id, opts = {})
      data, _status_code, _headers = private_article_publish_with_http_info(article_id, opts)
      return data
    end

    # Private Article Publish
    # - If the whole article is under embargo, it will not be published immediatly, but when the embargo expires or is lifted. - When an article is published, a new public version will be generated. Any further updates to the article will affect the private article data. In order to make these changes publicly visible, an explicit publish operation is needed.
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Location, Fixnum, Hash)>] Location data, response status code and response headers
    def private_article_publish_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_publish ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_publish"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_publish, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}/publish".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Location')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_publish\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Article Reserve DOI
    # Reserve DOI for article
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [ArticleDOI]
    def private_article_reserve_doi(article_id, opts = {})
      data, _status_code, _headers = private_article_reserve_doi_with_http_info(article_id, opts)
      return data
    end

    # Private Article Reserve DOI
    # Reserve DOI for article
    # @param article_id Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ArticleDOI, Fixnum, Hash)>] ArticleDOI data, response status code and response headers
    def private_article_reserve_doi_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_reserve_doi ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_reserve_doi"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_reserve_doi, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}/reserve_doi".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ArticleDOI')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_reserve_doi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update article
    # Updating an article by passing body parameters
    # @param article_id Article unique identifier
    # @param article Article description
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_article_update(article_id, article, opts = {})
      private_article_update_with_http_info(article_id, article, opts)
      return nil
    end

    # Update article
    # Updating an article by passing body parameters
    # @param article_id Article unique identifier
    # @param article Article description
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_article_update_with_http_info(article_id, article, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_update ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_update"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_update, must be greater than or equal to 1.'
      end

      # verify the required parameter 'article' is set
      if @api_client.config.client_side_validation && article.nil?
        fail ArgumentError, "Missing the required parameter 'article' when calling ArticlesApi.private_article_update"
      end
      # resource path
      local_var_path = "/account/articles/{article_id}".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(article)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Complete Upload
    # Complete file upload
    # @param article_id Article unique identifier
    # @param file_id File unique identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_article_upload_complete(article_id, file_id, opts = {})
      private_article_upload_complete_with_http_info(article_id, file_id, opts)
      return nil
    end

    # Complete Upload
    # Complete file upload
    # @param article_id Article unique identifier
    # @param file_id File unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_article_upload_complete_with_http_info(article_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_upload_complete ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_upload_complete"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_upload_complete, must be greater than or equal to 1.'
      end

      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling ArticlesApi.private_article_upload_complete"
      end
      if @api_client.config.client_side_validation && file_id < 1
        fail ArgumentError, 'invalid value for "file_id" when calling ArticlesApi.private_article_upload_complete, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles/{article_id}/files/{file_id}".sub('{' + 'article_id' + '}', article_id.to_s).sub('{' + 'file_id' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_upload_complete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate Upload
    # Initiate new file upload within the article. Either use link to provide only an existing file that will not be uploaded on figshare or use the other 3 parameters(md5, name, size)
    # @param article_id Article unique identifier
    # @param file 
    # @param [Hash] opts the optional parameters
    # @return [Location]
    def private_article_upload_initiate(article_id, file, opts = {})
      data, _status_code, _headers = private_article_upload_initiate_with_http_info(article_id, file, opts)
      return data
    end

    # Initiate Upload
    # Initiate new file upload within the article. Either use link to provide only an existing file that will not be uploaded on figshare or use the other 3 parameters(md5, name, size)
    # @param article_id Article unique identifier
    # @param file 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Location, Fixnum, Hash)>] Location data, response status code and response headers
    def private_article_upload_initiate_with_http_info(article_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_article_upload_initiate ..."
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ArticlesApi.private_article_upload_initiate"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ArticlesApi.private_article_upload_initiate, must be greater than or equal to 1.'
      end

      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling ArticlesApi.private_article_upload_initiate"
      end
      # resource path
      local_var_path = "/account/articles/{article_id}/files".sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(file)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Location')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_article_upload_initiate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Articles
    # Get Own Articles
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page (default to 10)
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @return [Array<Article>]
    def private_articles_list(opts = {})
      data, _status_code, _headers = private_articles_list_with_http_info(opts)
      return data
    end

    # Private Articles
    # Get Own Articles
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @return [Array<(Array<Article>, Fixnum, Hash)>] Array<Article> data, response status code and response headers
    def private_articles_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_articles_list ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ArticlesApi.private_articles_list, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ArticlesApi.private_articles_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ArticlesApi.private_articles_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ArticlesApi.private_articles_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ArticlesApi.private_articles_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ArticlesApi.private_articles_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ArticlesApi.private_articles_list, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 1
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ArticlesApi.private_articles_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/articles"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Article>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_articles_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Articles search
    # Returns a list of private articles filtered by the search parameters
    # @param search Search Parameters
    # @param [Hash] opts the optional parameters
    # @return [Array<Article>]
    def private_articles_search(search, opts = {})
      data, _status_code, _headers = private_articles_search_with_http_info(search, opts)
      return data
    end

    # Private Articles search
    # Returns a list of private articles filtered by the search parameters
    # @param search Search Parameters
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Article>, Fixnum, Hash)>] Array<Article> data, response status code and response headers
    def private_articles_search_with_http_info(search, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ArticlesApi.private_articles_search ..."
      end
      # verify the required parameter 'search' is set
      if @api_client.config.client_side_validation && search.nil?
        fail ArgumentError, "Missing the required parameter 'search' when calling ArticlesApi.private_articles_search"
      end
      # resource path
      local_var_path = "/account/articles/search"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(search)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Article>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArticlesApi#private_articles_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
