=begin
#Figshare API

#Figshare apiv2. Using Swagger 2.0

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class OtherApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Public Categories
    # Returns a list of public categories
    # @param [Hash] opts the optional parameters
    # @return [Array<Category>]
    def categories_list(opts = {})
      data, _status_code, _headers = categories_list_with_http_info(opts)
      return data
    end

    # Public Categories
    # Returns a list of public categories
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Category>, Fixnum, Hash)>] Array<Category> data, response status code and response headers
    def categories_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OtherApi.categories_list ..."
      end
      # resource path
      local_var_path = "/categories"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Category>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OtherApi#categories_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Public File Download
    # Starts the download of a file
    # @param file_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def file_download(file_id, opts = {})
      file_download_with_http_info(file_id, opts)
      return nil
    end

    # Public File Download
    # Starts the download of a file
    # @param file_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def file_download_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OtherApi.file_download ..."
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling OtherApi.file_download"
      end
      if @api_client.config.client_side_validation && file_id < 1
        fail ArgumentError, 'invalid value for "file_id" when calling OtherApi.file_download, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/file/download/{file_id}".sub('{' + 'file_id' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/force-download'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OtherApi#file_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Public Licenses
    # Returns a list of public licenses
    # @param [Hash] opts the optional parameters
    # @return [Array<License>]
    def licenses_list(opts = {})
      data, _status_code, _headers = licenses_list_with_http_info(opts)
      return data
    end

    # Public Licenses
    # Returns a list of public licenses
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<License>, Fixnum, Hash)>] Array<License> data, response status code and response headers
    def licenses_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OtherApi.licenses_list ..."
      end
      # resource path
      local_var_path = "/licenses"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<License>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OtherApi#licenses_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Account information
    # Account information for token/personal token
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def private_account(opts = {})
      data, _status_code, _headers = private_account_with_http_info(opts)
      return data
    end

    # Private Account information
    # Account information for token/personal token
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Fixnum, Hash)>] Account data, response status code and response headers
    def private_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OtherApi.private_account ..."
      end
      # resource path
      local_var_path = "/account"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Account')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OtherApi#private_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Account Licenses
    # This is a private endpoint that requires OAuth. It will return a list with figshare public licenses AND licenses defined for account's institution.
    # @param [Hash] opts the optional parameters
    # @return [Array<License>]
    def private_licenses_list(opts = {})
      data, _status_code, _headers = private_licenses_list_with_http_info(opts)
      return data
    end

    # Private Account Licenses
    # This is a private endpoint that requires OAuth. It will return a list with figshare public licenses AND licenses defined for account&#39;s institution.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<License>, Fixnum, Hash)>] Array<License> data, response status code and response headers
    def private_licenses_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OtherApi.private_licenses_list ..."
      end
      # resource path
      local_var_path = "/account/licenses"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<License>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OtherApi#private_licenses_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
