=begin
#Figshare API

#Figshare apiv2. Using Swagger 2.0

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class CollectionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Public Collection Articles
    # Returns a list of public collection articles
    # @param collection_id Collection Unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page (default to 10)
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @return [Array<Article>]
    def collection_articles(collection_id, opts = {})
      data, _status_code, _headers = collection_articles_with_http_info(collection_id, opts)
      return data
    end

    # Public Collection Articles
    # Returns a list of public collection articles
    # @param collection_id Collection Unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @return [Array<(Array<Article>, Fixnum, Hash)>] Array<Article> data, response status code and response headers
    def collection_articles_with_http_info(collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.collection_articles ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.collection_articles"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.collection_articles, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling CollectionsApi.collection_articles, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling CollectionsApi.collection_articles, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling CollectionsApi.collection_articles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling CollectionsApi.collection_articles, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CollectionsApi.collection_articles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CollectionsApi.collection_articles, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling CollectionsApi.collection_articles, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 1
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling CollectionsApi.collection_articles, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/collections/{collection_id}/articles".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Article>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#collection_articles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Collection details
    # View a collection
    # @param collection_id Collection Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [CollectionComplete]
    def collection_details(collection_id, opts = {})
      data, _status_code, _headers = collection_details_with_http_info(collection_id, opts)
      return data
    end

    # Collection details
    # View a collection
    # @param collection_id Collection Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CollectionComplete, Fixnum, Hash)>] CollectionComplete data, response status code and response headers
    def collection_details_with_http_info(collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.collection_details ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.collection_details"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.collection_details, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/collections/{collection_id}".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CollectionComplete')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#collection_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Collection Version details
    # View details for a certain version of a collection
    # @param collection_id Collection Unique identifier
    # @param version_id Version Number
    # @param [Hash] opts the optional parameters
    # @return [CollectionComplete]
    def collection_version_details(collection_id, version_id, opts = {})
      data, _status_code, _headers = collection_version_details_with_http_info(collection_id, version_id, opts)
      return data
    end

    # Collection Version details
    # View details for a certain version of a collection
    # @param collection_id Collection Unique identifier
    # @param version_id Version Number
    # @param [Hash] opts the optional parameters
    # @return [Array<(CollectionComplete, Fixnum, Hash)>] CollectionComplete data, response status code and response headers
    def collection_version_details_with_http_info(collection_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.collection_version_details ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.collection_version_details"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.collection_version_details, must be greater than or equal to 1.'
      end

      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling CollectionsApi.collection_version_details"
      end
      if @api_client.config.client_side_validation && version_id < 1
        fail ArgumentError, 'invalid value for "version_id" when calling CollectionsApi.collection_version_details, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/collections/{collection_id}/versions/{version_id}".sub('{' + 'collection_id' + '}', collection_id.to_s).sub('{' + 'version_id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CollectionComplete')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#collection_version_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Collection Versions list
    # Returns a list of public collection Versions
    # @param collection_id Collection Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<Version>]
    def collection_versions(collection_id, opts = {})
      data, _status_code, _headers = collection_versions_with_http_info(collection_id, opts)
      return data
    end

    # Collection Versions list
    # Returns a list of public collection Versions
    # @param collection_id Collection Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Version>, Fixnum, Hash)>] Array<Version> data, response status code and response headers
    def collection_versions_with_http_info(collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.collection_versions ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.collection_versions"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.collection_versions, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/collections/{collection_id}/versions".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Version>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#collection_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Public Collections
    # Returns a list of public collections
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page (default to 10)
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @option opts [String] :order The field by which to order. Default varies by endpoint/resource. (default to published_date)
    # @option opts [String] :order_direction  (default to desc)
    # @option opts [Integer] :institution only return collections from this institution
    # @option opts [String] :published_since Filter by collection publishing date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD
    # @option opts [String] :modified_since Filter by collection modified date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD
    # @option opts [Integer] :group only return collections from this group
    # @option opts [String] :resource_doi only return collections with this resource_doi
    # @option opts [String] :doi only return collections with this doi
    # @return [Array<Collection>]
    def collections_list(opts = {})
      data, _status_code, _headers = collections_list_with_http_info(opts)
      return data
    end

    # Public Collections
    # Returns a list of public collections
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @option opts [String] :order The field by which to order. Default varies by endpoint/resource.
    # @option opts [String] :order_direction 
    # @option opts [Integer] :institution only return collections from this institution
    # @option opts [String] :published_since Filter by collection publishing date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD
    # @option opts [String] :modified_since Filter by collection modified date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD
    # @option opts [Integer] :group only return collections from this group
    # @option opts [String] :resource_doi only return collections with this resource_doi
    # @option opts [String] :doi only return collections with this doi
    # @return [Array<(Array<Collection>, Fixnum, Hash)>] Array<Collection> data, response status code and response headers
    def collections_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.collections_list ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling CollectionsApi.collections_list, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling CollectionsApi.collections_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling CollectionsApi.collections_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling CollectionsApi.collections_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CollectionsApi.collections_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CollectionsApi.collections_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling CollectionsApi.collections_list, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 1
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling CollectionsApi.collections_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && opts[:'order'] && !['published_date', 'modified_date', 'views', 'shares', 'downloads', 'cites'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of published_date, modified_date, views, shares, downloads, cites'
      end
      if @api_client.config.client_side_validation && opts[:'order_direction'] && !['asc', 'desc'].include?(opts[:'order_direction'])
        fail ArgumentError, 'invalid value for "order_direction", must be one of asc, desc'
      end
      # resource path
      local_var_path = "/collections"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'order_direction'] = opts[:'order_direction'] if !opts[:'order_direction'].nil?
      query_params[:'institution'] = opts[:'institution'] if !opts[:'institution'].nil?
      query_params[:'published_since'] = opts[:'published_since'] if !opts[:'published_since'].nil?
      query_params[:'modified_since'] = opts[:'modified_since'] if !opts[:'modified_since'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'resource_doi'] = opts[:'resource_doi'] if !opts[:'resource_doi'].nil?
      query_params[:'doi'] = opts[:'doi'] if !opts[:'doi'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Collection>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#collections_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Public Collections Search
    # Returns a list of public collections
    # @param [Hash] opts the optional parameters
    # @option opts [CollectionSearch] :search Search Parameters
    # @return [Array<Collection>]
    def collections_search(opts = {})
      data, _status_code, _headers = collections_search_with_http_info(opts)
      return data
    end

    # Public Collections Search
    # Returns a list of public collections
    # @param [Hash] opts the optional parameters
    # @option opts [CollectionSearch] :search Search Parameters
    # @return [Array<(Array<Collection>, Fixnum, Hash)>] Array<Collection> data, response status code and response headers
    def collections_search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.collections_search ..."
      end
      # resource path
      local_var_path = "/collections/search"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'search'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Collection>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#collections_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete collection article
    # De-associate article from collection
    # @param collection_id Collection unique identifier
    # @param article_id Collection article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_collection_article_delete(collection_id, article_id, opts = {})
      private_collection_article_delete_with_http_info(collection_id, article_id, opts)
      return nil
    end

    # Delete collection article
    # De-associate article from collection
    # @param collection_id Collection unique identifier
    # @param article_id Collection article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_collection_article_delete_with_http_info(collection_id, article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_article_delete ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_article_delete"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_article_delete, must be greater than or equal to 1.'
      end

      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling CollectionsApi.private_collection_article_delete"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling CollectionsApi.private_collection_article_delete, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/collections/{collection_id}/articles/{article_id}".sub('{' + 'collection_id' + '}', collection_id.to_s).sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_article_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add collection articles
    # Associate new articles with the collection. This will add new articles to the list of already associated articles
    # @param collection_id Collection unique identifier
    # @param articles Articles list
    # @param [Hash] opts the optional parameters
    # @return [Location]
    def private_collection_articles_add(collection_id, articles, opts = {})
      data, _status_code, _headers = private_collection_articles_add_with_http_info(collection_id, articles, opts)
      return data
    end

    # Add collection articles
    # Associate new articles with the collection. This will add new articles to the list of already associated articles
    # @param collection_id Collection unique identifier
    # @param articles Articles list
    # @param [Hash] opts the optional parameters
    # @return [Array<(Location, Fixnum, Hash)>] Location data, response status code and response headers
    def private_collection_articles_add_with_http_info(collection_id, articles, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_articles_add ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_articles_add"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_articles_add, must be greater than or equal to 1.'
      end

      # verify the required parameter 'articles' is set
      if @api_client.config.client_side_validation && articles.nil?
        fail ArgumentError, "Missing the required parameter 'articles' when calling CollectionsApi.private_collection_articles_add"
      end
      # resource path
      local_var_path = "/account/collections/{collection_id}/articles".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(articles)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Location')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_articles_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List collection articles
    # List collection articles
    # @param collection_id Collection unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<Article>]
    def private_collection_articles_list(collection_id, opts = {})
      data, _status_code, _headers = private_collection_articles_list_with_http_info(collection_id, opts)
      return data
    end

    # List collection articles
    # List collection articles
    # @param collection_id Collection unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Article>, Fixnum, Hash)>] Array<Article> data, response status code and response headers
    def private_collection_articles_list_with_http_info(collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_articles_list ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_articles_list"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_articles_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/collections/{collection_id}/articles".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Article>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_articles_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace collection articles
    # Associate new articles with the collection. This will remove all already associated articles and add these new ones
    # @param collection_id Collection unique identifier
    # @param articles Articles List
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_collection_articles_replace(collection_id, articles, opts = {})
      private_collection_articles_replace_with_http_info(collection_id, articles, opts)
      return nil
    end

    # Replace collection articles
    # Associate new articles with the collection. This will remove all already associated articles and add these new ones
    # @param collection_id Collection unique identifier
    # @param articles Articles List
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_collection_articles_replace_with_http_info(collection_id, articles, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_articles_replace ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_articles_replace"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_articles_replace, must be greater than or equal to 1.'
      end

      # verify the required parameter 'articles' is set
      if @api_client.config.client_side_validation && articles.nil?
        fail ArgumentError, "Missing the required parameter 'articles' when calling CollectionsApi.private_collection_articles_replace"
      end
      # resource path
      local_var_path = "/account/collections/{collection_id}/articles".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(articles)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_articles_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete collection author
    # Delete collection author
    # @param collection_id Collection unique identifier
    # @param author_id Collection Author unique identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_collection_author_delete(collection_id, author_id, opts = {})
      private_collection_author_delete_with_http_info(collection_id, author_id, opts)
      return nil
    end

    # Delete collection author
    # Delete collection author
    # @param collection_id Collection unique identifier
    # @param author_id Collection Author unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_collection_author_delete_with_http_info(collection_id, author_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_author_delete ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_author_delete"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_author_delete, must be greater than or equal to 1.'
      end

      # verify the required parameter 'author_id' is set
      if @api_client.config.client_side_validation && author_id.nil?
        fail ArgumentError, "Missing the required parameter 'author_id' when calling CollectionsApi.private_collection_author_delete"
      end
      if @api_client.config.client_side_validation && author_id < 1
        fail ArgumentError, 'invalid value for "author_id" when calling CollectionsApi.private_collection_author_delete, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/collections/{collection_id}/authors/{author_id}".sub('{' + 'collection_id' + '}', collection_id.to_s).sub('{' + 'author_id' + '}', author_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_author_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add collection authors
    # Associate new authors with the collection. This will add new authors to the list of already associated authors
    # @param collection_id Collection unique identifier
    # @param authors List of authors
    # @param [Hash] opts the optional parameters
    # @return [Location]
    def private_collection_authors_add(collection_id, authors, opts = {})
      data, _status_code, _headers = private_collection_authors_add_with_http_info(collection_id, authors, opts)
      return data
    end

    # Add collection authors
    # Associate new authors with the collection. This will add new authors to the list of already associated authors
    # @param collection_id Collection unique identifier
    # @param authors List of authors
    # @param [Hash] opts the optional parameters
    # @return [Array<(Location, Fixnum, Hash)>] Location data, response status code and response headers
    def private_collection_authors_add_with_http_info(collection_id, authors, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_authors_add ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_authors_add"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_authors_add, must be greater than or equal to 1.'
      end

      # verify the required parameter 'authors' is set
      if @api_client.config.client_side_validation && authors.nil?
        fail ArgumentError, "Missing the required parameter 'authors' when calling CollectionsApi.private_collection_authors_add"
      end
      # resource path
      local_var_path = "/account/collections/{collection_id}/authors".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(authors)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Location')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_authors_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List collection authors
    # List collection authors
    # @param collection_id Collection unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<Author>]
    def private_collection_authors_list(collection_id, opts = {})
      data, _status_code, _headers = private_collection_authors_list_with_http_info(collection_id, opts)
      return data
    end

    # List collection authors
    # List collection authors
    # @param collection_id Collection unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Author>, Fixnum, Hash)>] Array<Author> data, response status code and response headers
    def private_collection_authors_list_with_http_info(collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_authors_list ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_authors_list"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_authors_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/collections/{collection_id}/authors".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Author>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_authors_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace collection authors
    # Associate new authors with the collection. This will remove all already associated authors and add these new ones
    # @param collection_id Collection unique identifier
    # @param authors List of authors
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_collection_authors_replace(collection_id, authors, opts = {})
      private_collection_authors_replace_with_http_info(collection_id, authors, opts)
      return nil
    end

    # Replace collection authors
    # Associate new authors with the collection. This will remove all already associated authors and add these new ones
    # @param collection_id Collection unique identifier
    # @param authors List of authors
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_collection_authors_replace_with_http_info(collection_id, authors, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_authors_replace ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_authors_replace"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_authors_replace, must be greater than or equal to 1.'
      end

      # verify the required parameter 'authors' is set
      if @api_client.config.client_side_validation && authors.nil?
        fail ArgumentError, "Missing the required parameter 'authors' when calling CollectionsApi.private_collection_authors_replace"
      end
      # resource path
      local_var_path = "/account/collections/{collection_id}/authors".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(authors)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_authors_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add collection categories
    # Associate new categories with the collection. This will add new categories to the list of already associated categories
    # @param collection_id Collection unique identifier
    # @param categories Categories list
    # @param [Hash] opts the optional parameters
    # @return [Location]
    def private_collection_categories_add(collection_id, categories, opts = {})
      data, _status_code, _headers = private_collection_categories_add_with_http_info(collection_id, categories, opts)
      return data
    end

    # Add collection categories
    # Associate new categories with the collection. This will add new categories to the list of already associated categories
    # @param collection_id Collection unique identifier
    # @param categories Categories list
    # @param [Hash] opts the optional parameters
    # @return [Array<(Location, Fixnum, Hash)>] Location data, response status code and response headers
    def private_collection_categories_add_with_http_info(collection_id, categories, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_categories_add ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_categories_add"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_categories_add, must be greater than or equal to 1.'
      end

      # verify the required parameter 'categories' is set
      if @api_client.config.client_side_validation && categories.nil?
        fail ArgumentError, "Missing the required parameter 'categories' when calling CollectionsApi.private_collection_categories_add"
      end
      # resource path
      local_var_path = "/account/collections/{collection_id}/categories".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(categories)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Location')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_categories_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List collection categories
    # List collection categories
    # @param collection_id Collection unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<Category>]
    def private_collection_categories_list(collection_id, opts = {})
      data, _status_code, _headers = private_collection_categories_list_with_http_info(collection_id, opts)
      return data
    end

    # List collection categories
    # List collection categories
    # @param collection_id Collection unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Category>, Fixnum, Hash)>] Array<Category> data, response status code and response headers
    def private_collection_categories_list_with_http_info(collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_categories_list ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_categories_list"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_categories_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/collections/{collection_id}/categories".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Category>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_categories_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace collection categories
    # Associate new categories with the collection. This will remove all already associated categories and add these new ones
    # @param collection_id Collection unique identifier
    # @param categories Categories list
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_collection_categories_replace(collection_id, categories, opts = {})
      private_collection_categories_replace_with_http_info(collection_id, categories, opts)
      return nil
    end

    # Replace collection categories
    # Associate new categories with the collection. This will remove all already associated categories and add these new ones
    # @param collection_id Collection unique identifier
    # @param categories Categories list
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_collection_categories_replace_with_http_info(collection_id, categories, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_categories_replace ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_categories_replace"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_categories_replace, must be greater than or equal to 1.'
      end

      # verify the required parameter 'categories' is set
      if @api_client.config.client_side_validation && categories.nil?
        fail ArgumentError, "Missing the required parameter 'categories' when calling CollectionsApi.private_collection_categories_replace"
      end
      # resource path
      local_var_path = "/account/collections/{collection_id}/categories".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(categories)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_categories_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete collection category
    # De-associate category from collection
    # @param collection_id Collection unique identifier
    # @param category_id Collection category unique identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_collection_category_delete(collection_id, category_id, opts = {})
      private_collection_category_delete_with_http_info(collection_id, category_id, opts)
      return nil
    end

    # Delete collection category
    # De-associate category from collection
    # @param collection_id Collection unique identifier
    # @param category_id Collection category unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_collection_category_delete_with_http_info(collection_id, category_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_category_delete ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_category_delete"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_category_delete, must be greater than or equal to 1.'
      end

      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling CollectionsApi.private_collection_category_delete"
      end
      if @api_client.config.client_side_validation && category_id < 1
        fail ArgumentError, 'invalid value for "category_id" when calling CollectionsApi.private_collection_category_delete, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/collections/{collection_id}/categories/{category_id}".sub('{' + 'collection_id' + '}', collection_id.to_s).sub('{' + 'category_id' + '}', category_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_category_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create collection
    # Create a new Collection by sending collection information
    # @param collection Collection description
    # @param [Hash] opts the optional parameters
    # @return [CollectionComplete]
    def private_collection_create(collection, opts = {})
      data, _status_code, _headers = private_collection_create_with_http_info(collection, opts)
      return data
    end

    # Create collection
    # Create a new Collection by sending collection information
    # @param collection Collection description
    # @param [Hash] opts the optional parameters
    # @return [Array<(CollectionComplete, Fixnum, Hash)>] CollectionComplete data, response status code and response headers
    def private_collection_create_with_http_info(collection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_create ..."
      end
      # verify the required parameter 'collection' is set
      if @api_client.config.client_side_validation && collection.nil?
        fail ArgumentError, "Missing the required parameter 'collection' when calling CollectionsApi.private_collection_create"
      end
      # resource path
      local_var_path = "/account/collections"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(collection)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CollectionComplete')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete collection
    # Delete n collection
    # @param collection_id Collection Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_collection_delete(collection_id, opts = {})
      private_collection_delete_with_http_info(collection_id, opts)
      return nil
    end

    # Delete collection
    # Delete n collection
    # @param collection_id Collection Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_collection_delete_with_http_info(collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_delete ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_delete"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_delete, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/collections/{collection_id}".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Collection details
    # View a collection
    # @param collection_id Collection Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [CollectionComplete]
    def private_collection_details(collection_id, opts = {})
      data, _status_code, _headers = private_collection_details_with_http_info(collection_id, opts)
      return data
    end

    # Collection details
    # View a collection
    # @param collection_id Collection Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CollectionComplete, Fixnum, Hash)>] CollectionComplete data, response status code and response headers
    def private_collection_details_with_http_info(collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_details ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_details"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_details, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/collections/{collection_id}".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CollectionComplete')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create collection private link
    # Create new private link
    # @param collection_id Collection unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [CollectionPrivateLinkCreator] :private_link 
    # @return [Location]
    def private_collection_private_link_create(collection_id, opts = {})
      data, _status_code, _headers = private_collection_private_link_create_with_http_info(collection_id, opts)
      return data
    end

    # Create collection private link
    # Create new private link
    # @param collection_id Collection unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [CollectionPrivateLinkCreator] :private_link 
    # @return [Array<(Location, Fixnum, Hash)>] Location data, response status code and response headers
    def private_collection_private_link_create_with_http_info(collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_private_link_create ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_private_link_create"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_private_link_create, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/collections/{collection_id}/private_links".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'private_link'])
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Location')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_private_link_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable private link
    # Disable/delete private link for this collection
    # @param collection_id Collection unique identifier
    # @param link_id Private link token
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_collection_private_link_delete(collection_id, link_id, opts = {})
      private_collection_private_link_delete_with_http_info(collection_id, link_id, opts)
      return nil
    end

    # Disable private link
    # Disable/delete private link for this collection
    # @param collection_id Collection unique identifier
    # @param link_id Private link token
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_collection_private_link_delete_with_http_info(collection_id, link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_private_link_delete ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_private_link_delete"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_private_link_delete, must be greater than or equal to 1.'
      end

      # verify the required parameter 'link_id' is set
      if @api_client.config.client_side_validation && link_id.nil?
        fail ArgumentError, "Missing the required parameter 'link_id' when calling CollectionsApi.private_collection_private_link_delete"
      end
      # resource path
      local_var_path = "/account/collections/{collection_id}/private_links/{link_id}".sub('{' + 'collection_id' + '}', collection_id.to_s).sub('{' + 'link_id' + '}', link_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_private_link_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update collection private link
    # Update existing private link for this collection
    # @param collection_id Collection unique identifier
    # @param link_id Private link token
    # @param [Hash] opts the optional parameters
    # @option opts [CollectionPrivateLinkCreator] :private_link 
    # @return [nil]
    def private_collection_private_link_update(collection_id, link_id, opts = {})
      private_collection_private_link_update_with_http_info(collection_id, link_id, opts)
      return nil
    end

    # Update collection private link
    # Update existing private link for this collection
    # @param collection_id Collection unique identifier
    # @param link_id Private link token
    # @param [Hash] opts the optional parameters
    # @option opts [CollectionPrivateLinkCreator] :private_link 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_collection_private_link_update_with_http_info(collection_id, link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_private_link_update ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_private_link_update"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_private_link_update, must be greater than or equal to 1.'
      end

      # verify the required parameter 'link_id' is set
      if @api_client.config.client_side_validation && link_id.nil?
        fail ArgumentError, "Missing the required parameter 'link_id' when calling CollectionsApi.private_collection_private_link_update"
      end
      # resource path
      local_var_path = "/account/collections/{collection_id}/private_links/{link_id}".sub('{' + 'collection_id' + '}', collection_id.to_s).sub('{' + 'link_id' + '}', link_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'private_link'])
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_private_link_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List collection private links
    # List article private links
    # @param collection_id Collection unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<PrivateLink>]
    def private_collection_private_links_list(collection_id, opts = {})
      data, _status_code, _headers = private_collection_private_links_list_with_http_info(collection_id, opts)
      return data
    end

    # List collection private links
    # List article private links
    # @param collection_id Collection unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PrivateLink>, Fixnum, Hash)>] Array<PrivateLink> data, response status code and response headers
    def private_collection_private_links_list_with_http_info(collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_private_links_list ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_private_links_list"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_private_links_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/collections/{collection_id}/private_links".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PrivateLink>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_private_links_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Collection Publish
    # When a collection is published, a new public version will be generated. Any further updates to the collection will affect the private collection data. In order to make these changes publicly visible, an explicit publish operation is needed.
    # @param collection_id Collection Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Location]
    def private_collection_publish(collection_id, opts = {})
      data, _status_code, _headers = private_collection_publish_with_http_info(collection_id, opts)
      return data
    end

    # Private Collection Publish
    # When a collection is published, a new public version will be generated. Any further updates to the collection will affect the private collection data. In order to make these changes publicly visible, an explicit publish operation is needed.
    # @param collection_id Collection Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Location, Fixnum, Hash)>] Location data, response status code and response headers
    def private_collection_publish_with_http_info(collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_publish ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_publish"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_publish, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/collections/{collection_id}/publish".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Location')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_publish\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Collection Reserve DOI
    # Reserve DOI for collection
    # @param collection_id Collection Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [ArticleDOI]
    def private_collection_reserve_doi(collection_id, opts = {})
      data, _status_code, _headers = private_collection_reserve_doi_with_http_info(collection_id, opts)
      return data
    end

    # Private Collection Reserve DOI
    # Reserve DOI for collection
    # @param collection_id Collection Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ArticleDOI, Fixnum, Hash)>] ArticleDOI data, response status code and response headers
    def private_collection_reserve_doi_with_http_info(collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_reserve_doi ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_reserve_doi"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_reserve_doi, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/collections/{collection_id}/reserve_doi".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ArticleDOI')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_reserve_doi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update collection
    # Update collection details
    # @param collection_id Collection Unique identifier
    # @param collection Collection description
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_collection_update(collection_id, collection, opts = {})
      private_collection_update_with_http_info(collection_id, collection, opts)
      return nil
    end

    # Update collection
    # Update collection details
    # @param collection_id Collection Unique identifier
    # @param collection Collection description
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_collection_update_with_http_info(collection_id, collection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collection_update ..."
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling CollectionsApi.private_collection_update"
      end
      if @api_client.config.client_side_validation && collection_id < 1
        fail ArgumentError, 'invalid value for "collection_id" when calling CollectionsApi.private_collection_update, must be greater than or equal to 1.'
      end

      # verify the required parameter 'collection' is set
      if @api_client.config.client_side_validation && collection.nil?
        fail ArgumentError, "Missing the required parameter 'collection' when calling CollectionsApi.private_collection_update"
      end
      # resource path
      local_var_path = "/account/collections/{collection_id}".sub('{' + 'collection_id' + '}', collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(collection)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collection_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Collections List
    # List private collections
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page (default to 10)
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @option opts [String] :order The field by which to order. Default varies by endpoint/resource. (default to published_date)
    # @option opts [String] :order_direction  (default to desc)
    # @return [Array<Collection>]
    def private_collections_list(opts = {})
      data, _status_code, _headers = private_collections_list_with_http_info(opts)
      return data
    end

    # Private Collections List
    # List private collections
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @option opts [String] :order The field by which to order. Default varies by endpoint/resource.
    # @option opts [String] :order_direction 
    # @return [Array<(Array<Collection>, Fixnum, Hash)>] Array<Collection> data, response status code and response headers
    def private_collections_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collections_list ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling CollectionsApi.private_collections_list, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling CollectionsApi.private_collections_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling CollectionsApi.private_collections_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling CollectionsApi.private_collections_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CollectionsApi.private_collections_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CollectionsApi.private_collections_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling CollectionsApi.private_collections_list, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 1
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling CollectionsApi.private_collections_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && opts[:'order'] && !['published_date', 'modified_date', 'views', 'shares', 'downloads', 'cites'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of published_date, modified_date, views, shares, downloads, cites'
      end
      if @api_client.config.client_side_validation && opts[:'order_direction'] && !['asc', 'desc'].include?(opts[:'order_direction'])
        fail ArgumentError, 'invalid value for "order_direction", must be one of asc, desc'
      end
      # resource path
      local_var_path = "/account/collections"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'order_direction'] = opts[:'order_direction'] if !opts[:'order_direction'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Collection>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collections_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Collections Search
    # Returns a list of private Collections
    # @param search Search Parameters
    # @param [Hash] opts the optional parameters
    # @return [Array<Collection>]
    def private_collections_search(search, opts = {})
      data, _status_code, _headers = private_collections_search_with_http_info(search, opts)
      return data
    end

    # Private Collections Search
    # Returns a list of private Collections
    # @param search Search Parameters
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Collection>, Fixnum, Hash)>] Array<Collection> data, response status code and response headers
    def private_collections_search_with_http_info(search, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectionsApi.private_collections_search ..."
      end
      # verify the required parameter 'search' is set
      if @api_client.config.client_side_validation && search.nil?
        fail ArgumentError, "Missing the required parameter 'search' when calling CollectionsApi.private_collections_search"
      end
      # resource path
      local_var_path = "/account/collections/search"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(search)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Collection>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#private_collections_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
