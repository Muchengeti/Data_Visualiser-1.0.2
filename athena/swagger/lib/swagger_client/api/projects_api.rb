=begin
#Figshare API

#Figshare apiv2. Using Swagger 2.0

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class ProjectsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete project article
    # Delete project article
    # @param project_id Project unique identifier
    # @param article_id Project Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_project_article_delete(project_id, article_id, opts = {})
      private_project_article_delete_with_http_info(project_id, article_id, opts)
      return nil
    end

    # Delete project article
    # Delete project article
    # @param project_id Project unique identifier
    # @param article_id Project Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_project_article_delete_with_http_info(project_id, article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_article_delete ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_article_delete"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_article_delete, must be greater than or equal to 1.'
      end

      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ProjectsApi.private_project_article_delete"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ProjectsApi.private_project_article_delete, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/projects/{project_id}/articles/{article_id}".sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_article_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Project article details
    # Project article details
    # @param project_id Project unique identifier
    # @param article_id Project Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [ProjectArticle]
    def private_project_article_details(project_id, article_id, opts = {})
      data, _status_code, _headers = private_project_article_details_with_http_info(project_id, article_id, opts)
      return data
    end

    # Project article details
    # Project article details
    # @param project_id Project unique identifier
    # @param article_id Project Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectArticle, Fixnum, Hash)>] ProjectArticle data, response status code and response headers
    def private_project_article_details_with_http_info(project_id, article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_article_details ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_article_details"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_article_details, must be greater than or equal to 1.'
      end

      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ProjectsApi.private_project_article_details"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ProjectsApi.private_project_article_details, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/projects/{project_id}/articles/{article_id}".sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectArticle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_article_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Project article file details
    # Project article file details
    # @param project_id Project unique identifier
    # @param article_id Project Article unique identifier
    # @param file_id File unique identifier
    # @param [Hash] opts the optional parameters
    # @return [PrivateFile]
    def private_project_article_file(project_id, article_id, file_id, opts = {})
      data, _status_code, _headers = private_project_article_file_with_http_info(project_id, article_id, file_id, opts)
      return data
    end

    # Project article file details
    # Project article file details
    # @param project_id Project unique identifier
    # @param article_id Project Article unique identifier
    # @param file_id File unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrivateFile, Fixnum, Hash)>] PrivateFile data, response status code and response headers
    def private_project_article_file_with_http_info(project_id, article_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_article_file ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_article_file"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_article_file, must be greater than or equal to 1.'
      end

      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ProjectsApi.private_project_article_file"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ProjectsApi.private_project_article_file, must be greater than or equal to 1.'
      end

      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling ProjectsApi.private_project_article_file"
      end
      if @api_client.config.client_side_validation && file_id < 1
        fail ArgumentError, 'invalid value for "file_id" when calling ProjectsApi.private_project_article_file, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/projects/{project_id}/articles/{article_id}/files/{file_id}".sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'article_id' + '}', article_id.to_s).sub('{' + 'file_id' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PrivateFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_article_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Project article list files
    # List article files
    # @param project_id Project unique identifier
    # @param article_id Project Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<PrivateFile>]
    def private_project_article_files(project_id, article_id, opts = {})
      data, _status_code, _headers = private_project_article_files_with_http_info(project_id, article_id, opts)
      return data
    end

    # Project article list files
    # List article files
    # @param project_id Project unique identifier
    # @param article_id Project Article unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PrivateFile>, Fixnum, Hash)>] Array<PrivateFile> data, response status code and response headers
    def private_project_article_files_with_http_info(project_id, article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_article_files ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_article_files"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_article_files, must be greater than or equal to 1.'
      end

      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling ProjectsApi.private_project_article_files"
      end
      if @api_client.config.client_side_validation && article_id < 1
        fail ArgumentError, 'invalid value for "article_id" when calling ProjectsApi.private_project_article_files, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/projects/{project_id}/articles/{article_id}/files".sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'article_id' + '}', article_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PrivateFile>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_article_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create project article
    # Create a new Article and associate it with this project
    # @param project_id Proejct unique identifier
    # @param article Article description
    # @param [Hash] opts the optional parameters
    # @return [Location]
    def private_project_articles_create(project_id, article, opts = {})
      data, _status_code, _headers = private_project_articles_create_with_http_info(project_id, article, opts)
      return data
    end

    # Create project article
    # Create a new Article and associate it with this project
    # @param project_id Proejct unique identifier
    # @param article Article description
    # @param [Hash] opts the optional parameters
    # @return [Array<(Location, Fixnum, Hash)>] Location data, response status code and response headers
    def private_project_articles_create_with_http_info(project_id, article, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_articles_create ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_articles_create"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_articles_create, must be greater than or equal to 1.'
      end

      # verify the required parameter 'article' is set
      if @api_client.config.client_side_validation && article.nil?
        fail ArgumentError, "Missing the required parameter 'article' when calling ProjectsApi.private_project_articles_create"
      end
      # resource path
      local_var_path = "/account/projects/{project_id}/articles".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(article)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Location')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_articles_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List project articles
    # List project articles
    # @param project_id Proejct unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<Article>]
    def private_project_articles_list(project_id, opts = {})
      data, _status_code, _headers = private_project_articles_list_with_http_info(project_id, opts)
      return data
    end

    # List project articles
    # List project articles
    # @param project_id Proejct unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Article>, Fixnum, Hash)>] Array<Article> data, response status code and response headers
    def private_project_articles_list_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_articles_list ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_articles_list"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_articles_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/projects/{project_id}/articles".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Article>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_articles_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove project collaborator
    # Remove project collaborator
    # @param project_id Project unique identifier
    # @param user_id User unique identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_project_collaborator_delete(project_id, user_id, opts = {})
      private_project_collaborator_delete_with_http_info(project_id, user_id, opts)
      return nil
    end

    # Remove project collaborator
    # Remove project collaborator
    # @param project_id Project unique identifier
    # @param user_id User unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_project_collaborator_delete_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_collaborator_delete ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_collaborator_delete"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_collaborator_delete, must be greater than or equal to 1.'
      end

      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ProjectsApi.private_project_collaborator_delete"
      end
      if @api_client.config.client_side_validation && user_id < 1
        fail ArgumentError, 'invalid value for "user_id" when calling ProjectsApi.private_project_collaborator_delete, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/projects/{project_id}/collaborators/{user_id}".sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'user_id' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_collaborator_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invite project collaborators
    # Invite users to collaborate on project or view the project
    # @param project_id Project unique identifier
    # @param collaborator viewer or collaborator role. User user_id or email of user
    # @param [Hash] opts the optional parameters
    # @return [ResponseMessage]
    def private_project_collaborators_invite(project_id, collaborator, opts = {})
      data, _status_code, _headers = private_project_collaborators_invite_with_http_info(project_id, collaborator, opts)
      return data
    end

    # Invite project collaborators
    # Invite users to collaborate on project or view the project
    # @param project_id Project unique identifier
    # @param collaborator viewer or collaborator role. User user_id or email of user
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseMessage, Fixnum, Hash)>] ResponseMessage data, response status code and response headers
    def private_project_collaborators_invite_with_http_info(project_id, collaborator, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_collaborators_invite ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_collaborators_invite"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_collaborators_invite, must be greater than or equal to 1.'
      end

      # verify the required parameter 'collaborator' is set
      if @api_client.config.client_side_validation && collaborator.nil?
        fail ArgumentError, "Missing the required parameter 'collaborator' when calling ProjectsApi.private_project_collaborators_invite"
      end
      # resource path
      local_var_path = "/account/projects/{project_id}/collaborators".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(collaborator)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_collaborators_invite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List project collaborators
    # List Project collaborators and invited users
    # @param project_id Project unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<ProjectCollaborator>]
    def private_project_collaborators_list(project_id, opts = {})
      data, _status_code, _headers = private_project_collaborators_list_with_http_info(project_id, opts)
      return data
    end

    # List project collaborators
    # List Project collaborators and invited users
    # @param project_id Project unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ProjectCollaborator>, Fixnum, Hash)>] Array<ProjectCollaborator> data, response status code and response headers
    def private_project_collaborators_list_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_collaborators_list ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_collaborators_list"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_collaborators_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/projects/{project_id}/collaborators".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ProjectCollaborator>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_collaborators_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create project
    # Create a new project
    # @param project Project  description
    # @param [Hash] opts the optional parameters
    # @return [Location]
    def private_project_create(project, opts = {})
      data, _status_code, _headers = private_project_create_with_http_info(project, opts)
      return data
    end

    # Create project
    # Create a new project
    # @param project Project  description
    # @param [Hash] opts the optional parameters
    # @return [Array<(Location, Fixnum, Hash)>] Location data, response status code and response headers
    def private_project_create_with_http_info(project, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_create ..."
      end
      # verify the required parameter 'project' is set
      if @api_client.config.client_side_validation && project.nil?
        fail ArgumentError, "Missing the required parameter 'project' when calling ProjectsApi.private_project_create"
      end
      # resource path
      local_var_path = "/account/projects"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(project)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Location')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete project
    # A project can be deleted only if: - it is not public - it does not have public articles.  When an individual project is deleted, all the articles are moved to my data of each owner.  When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project. 
    # @param project_id Project unique identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_project_delete(project_id, opts = {})
      private_project_delete_with_http_info(project_id, opts)
      return nil
    end

    # Delete project
    # A project can be deleted only if: - it is not public - it does not have public articles.  When an individual project is deleted, all the articles are moved to my data of each owner.  When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project. 
    # @param project_id Project unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_project_delete_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_delete ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_delete"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_delete, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/projects/{project_id}".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View project details
    # View a private project
    # @param project_id Project unique identifier
    # @param [Hash] opts the optional parameters
    # @return [ProjectCompletePrivate]
    def private_project_details(project_id, opts = {})
      data, _status_code, _headers = private_project_details_with_http_info(project_id, opts)
      return data
    end

    # View project details
    # View a private project
    # @param project_id Project unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectCompletePrivate, Fixnum, Hash)>] ProjectCompletePrivate data, response status code and response headers
    def private_project_details_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_details ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_details"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_details, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/projects/{project_id}".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectCompletePrivate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Project Leave
    # Please note: project's owner cannot leave the project.
    # @param project_id Project unique identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_project_leave(project_id, opts = {})
      private_project_leave_with_http_info(project_id, opts)
      return nil
    end

    # Private Project Leave
    # Please note: project&#39;s owner cannot leave the project.
    # @param project_id Project unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_project_leave_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_leave ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_leave"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_leave, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/projects/{project_id}/leave".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_leave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Project note details
    # 
    # @param project_id Project unique identifier
    # @param note_id Note unique identifier
    # @param [Hash] opts the optional parameters
    # @return [ProjectNotePrivate]
    def private_project_note(project_id, note_id, opts = {})
      data, _status_code, _headers = private_project_note_with_http_info(project_id, note_id, opts)
      return data
    end

    # Project note details
    # 
    # @param project_id Project unique identifier
    # @param note_id Note unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectNotePrivate, Fixnum, Hash)>] ProjectNotePrivate data, response status code and response headers
    def private_project_note_with_http_info(project_id, note_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_note ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_note"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_note, must be greater than or equal to 1.'
      end

      # verify the required parameter 'note_id' is set
      if @api_client.config.client_side_validation && note_id.nil?
        fail ArgumentError, "Missing the required parameter 'note_id' when calling ProjectsApi.private_project_note"
      end
      if @api_client.config.client_side_validation && note_id < 1
        fail ArgumentError, 'invalid value for "note_id" when calling ProjectsApi.private_project_note, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/projects/{project_id}/notes/{note_id}".sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'note_id' + '}', note_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectNotePrivate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete project note
    # 
    # @param project_id Project unique identifier
    # @param note_id Note unique identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_project_note_delete(project_id, note_id, opts = {})
      private_project_note_delete_with_http_info(project_id, note_id, opts)
      return nil
    end

    # Delete project note
    # 
    # @param project_id Project unique identifier
    # @param note_id Note unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_project_note_delete_with_http_info(project_id, note_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_note_delete ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_note_delete"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_note_delete, must be greater than or equal to 1.'
      end

      # verify the required parameter 'note_id' is set
      if @api_client.config.client_side_validation && note_id.nil?
        fail ArgumentError, "Missing the required parameter 'note_id' when calling ProjectsApi.private_project_note_delete"
      end
      if @api_client.config.client_side_validation && note_id < 1
        fail ArgumentError, 'invalid value for "note_id" when calling ProjectsApi.private_project_note_delete, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/projects/{project_id}/notes/{note_id}".sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'note_id' + '}', note_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_note_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update project note
    # 
    # @param project_id Project unique identifier
    # @param note_id Note unique identifier
    # @param note Note message
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_project_note_update(project_id, note_id, note, opts = {})
      private_project_note_update_with_http_info(project_id, note_id, note, opts)
      return nil
    end

    # Update project note
    # 
    # @param project_id Project unique identifier
    # @param note_id Note unique identifier
    # @param note Note message
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_project_note_update_with_http_info(project_id, note_id, note, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_note_update ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_note_update"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_note_update, must be greater than or equal to 1.'
      end

      # verify the required parameter 'note_id' is set
      if @api_client.config.client_side_validation && note_id.nil?
        fail ArgumentError, "Missing the required parameter 'note_id' when calling ProjectsApi.private_project_note_update"
      end
      if @api_client.config.client_side_validation && note_id < 1
        fail ArgumentError, 'invalid value for "note_id" when calling ProjectsApi.private_project_note_update, must be greater than or equal to 1.'
      end

      # verify the required parameter 'note' is set
      if @api_client.config.client_side_validation && note.nil?
        fail ArgumentError, "Missing the required parameter 'note' when calling ProjectsApi.private_project_note_update"
      end
      # resource path
      local_var_path = "/account/projects/{project_id}/notes/{note_id}".sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'note_id' + '}', note_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(note)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_note_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create project note
    # Create a new project note
    # @param project_id Project unique identifier
    # @param note Note message
    # @param [Hash] opts the optional parameters
    # @return [Location]
    def private_project_notes_create(project_id, note, opts = {})
      data, _status_code, _headers = private_project_notes_create_with_http_info(project_id, note, opts)
      return data
    end

    # Create project note
    # Create a new project note
    # @param project_id Project unique identifier
    # @param note Note message
    # @param [Hash] opts the optional parameters
    # @return [Array<(Location, Fixnum, Hash)>] Location data, response status code and response headers
    def private_project_notes_create_with_http_info(project_id, note, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_notes_create ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_notes_create"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_notes_create, must be greater than or equal to 1.'
      end

      # verify the required parameter 'note' is set
      if @api_client.config.client_side_validation && note.nil?
        fail ArgumentError, "Missing the required parameter 'note' when calling ProjectsApi.private_project_notes_create"
      end
      # resource path
      local_var_path = "/account/projects/{project_id}/notes".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(note)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Location')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_notes_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List project notes
    # List project notes
    # @param project_id Project unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page (default to 10)
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @return [Array<ProjectNote>]
    def private_project_notes_list(project_id, opts = {})
      data, _status_code, _headers = private_project_notes_list_with_http_info(project_id, opts)
      return data
    end

    # List project notes
    # List project notes
    # @param project_id Project unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @return [Array<(Array<ProjectNote>, Fixnum, Hash)>] Array<ProjectNote> data, response status code and response headers
    def private_project_notes_list_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_notes_list ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_notes_list"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_notes_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ProjectsApi.private_project_notes_list, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ProjectsApi.private_project_notes_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProjectsApi.private_project_notes_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProjectsApi.private_project_notes_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ProjectsApi.private_project_notes_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ProjectsApi.private_project_notes_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ProjectsApi.private_project_notes_list, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 1
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ProjectsApi.private_project_notes_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/projects/{project_id}/notes".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ProjectNote>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_notes_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Project Publish
    # Publish a project. Possible after all items inside it are public
    # @param project_id Project unique identifier
    # @param [Hash] opts the optional parameters
    # @return [ResponseMessage]
    def private_project_publish(project_id, opts = {})
      data, _status_code, _headers = private_project_publish_with_http_info(project_id, opts)
      return data
    end

    # Private Project Publish
    # Publish a project. Possible after all items inside it are public
    # @param project_id Project unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseMessage, Fixnum, Hash)>] ResponseMessage data, response status code and response headers
    def private_project_publish_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_publish ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_publish"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_publish, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/projects/{project_id}/publish".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_publish\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update project
    # Updating an project by passing body parameters
    # @param project_id Project unique identifier
    # @param project Project description
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def private_project_update(project_id, project, opts = {})
      private_project_update_with_http_info(project_id, project, opts)
      return nil
    end

    # Update project
    # Updating an project by passing body parameters
    # @param project_id Project unique identifier
    # @param project Project description
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def private_project_update_with_http_info(project_id, project, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_project_update ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.private_project_update"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.private_project_update, must be greater than or equal to 1.'
      end

      # verify the required parameter 'project' is set
      if @api_client.config.client_side_validation && project.nil?
        fail ArgumentError, "Missing the required parameter 'project' when calling ProjectsApi.private_project_update"
      end
      # resource path
      local_var_path = "/account/projects/{project_id}".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(project)
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_project_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Projects
    # List private projects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page (default to 10)
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @option opts [String] :order The field by which to order. Default varies by endpoint/resource. (default to published_date)
    # @option opts [String] :order_direction  (default to desc)
    # @option opts [String] :storage only return collections from this institution
    # @option opts [String] :roles Any combination of owner, collaborator, viewer separated by comma. Examples: \&quot;owner\&quot; or \&quot;owner,collaborator\&quot;.
    # @return [Array<ProjectPrivate>]
    def private_projects_list(opts = {})
      data, _status_code, _headers = private_projects_list_with_http_info(opts)
      return data
    end

    # Private Projects
    # List private projects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @option opts [String] :order The field by which to order. Default varies by endpoint/resource.
    # @option opts [String] :order_direction 
    # @option opts [String] :storage only return collections from this institution
    # @option opts [String] :roles Any combination of owner, collaborator, viewer separated by comma. Examples: \&quot;owner\&quot; or \&quot;owner,collaborator\&quot;.
    # @return [Array<(Array<ProjectPrivate>, Fixnum, Hash)>] Array<ProjectPrivate> data, response status code and response headers
    def private_projects_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_projects_list ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ProjectsApi.private_projects_list, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ProjectsApi.private_projects_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProjectsApi.private_projects_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProjectsApi.private_projects_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ProjectsApi.private_projects_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ProjectsApi.private_projects_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ProjectsApi.private_projects_list, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 1
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ProjectsApi.private_projects_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && opts[:'order'] && !['published_date', 'modified_date', 'views', 'shares', 'downloads', 'cites'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of published_date, modified_date, views, shares, downloads, cites'
      end
      if @api_client.config.client_side_validation && opts[:'order_direction'] && !['asc', 'desc'].include?(opts[:'order_direction'])
        fail ArgumentError, 'invalid value for "order_direction", must be one of asc, desc'
      end
      if @api_client.config.client_side_validation && opts[:'storage'] && !['group', 'individual'].include?(opts[:'storage'])
        fail ArgumentError, 'invalid value for "storage", must be one of group, individual'
      end
      # resource path
      local_var_path = "/account/projects"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'order_direction'] = opts[:'order_direction'] if !opts[:'order_direction'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?
      query_params[:'roles'] = opts[:'roles'] if !opts[:'roles'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ProjectPrivate>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_projects_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Private Projects search
    # Search inside the private projects
    # @param [Hash] opts the optional parameters
    # @option opts [CommonSearch] :search Search Parameters
    # @return [Array<ProjectPrivate>]
    def private_projects_search(opts = {})
      data, _status_code, _headers = private_projects_search_with_http_info(opts)
      return data
    end

    # Private Projects search
    # Search inside the private projects
    # @param [Hash] opts the optional parameters
    # @option opts [CommonSearch] :search Search Parameters
    # @return [Array<(Array<ProjectPrivate>, Fixnum, Hash)>] Array<ProjectPrivate> data, response status code and response headers
    def private_projects_search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.private_projects_search ..."
      end
      # resource path
      local_var_path = "/account/projects/search"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'search'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ProjectPrivate>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#private_projects_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Public Project Articles
    # List articles in project
    # @param project_id Project Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<Article>]
    def project_articles(project_id, opts = {})
      data, _status_code, _headers = project_articles_with_http_info(project_id, opts)
      return data
    end

    # Public Project Articles
    # List articles in project
    # @param project_id Project Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Article>, Fixnum, Hash)>] Array<Article> data, response status code and response headers
    def project_articles_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.project_articles ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.project_articles"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.project_articles, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/projects/{project_id}/articles".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Article>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#project_articles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Public Project
    # View a project
    # @param project_id Project Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [ProjectComplete]
    def project_details(project_id, opts = {})
      data, _status_code, _headers = project_details_with_http_info(project_id, opts)
      return data
    end

    # Public Project
    # View a project
    # @param project_id Project Unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectComplete, Fixnum, Hash)>] ProjectComplete data, response status code and response headers
    def project_details_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.project_details ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.project_details"
      end
      if @api_client.config.client_side_validation && project_id < 1
        fail ArgumentError, 'invalid value for "project_id" when calling ProjectsApi.project_details, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/projects/{project_id}".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectComplete')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#project_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Public Projects
    # Returns a list of public projects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page (default to 10)
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @option opts [String] :order The field by which to order. Default varies by endpoint/resource. (default to published_date)
    # @option opts [String] :order_direction  (default to desc)
    # @option opts [Integer] :institution only return collections from this institution
    # @option opts [String] :published_since Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    # @option opts [Integer] :group only return collections from this group
    # @return [Array<Project>]
    def projects_list(opts = {})
      data, _status_code, _headers = projects_list_with_http_info(opts)
      return data
    end

    # Public Projects
    # Returns a list of public projects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Used for pagination with page_size
    # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page
    # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
    # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
    # @option opts [String] :order The field by which to order. Default varies by endpoint/resource.
    # @option opts [String] :order_direction 
    # @option opts [Integer] :institution only return collections from this institution
    # @option opts [String] :published_since Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    # @option opts [Integer] :group only return collections from this group
    # @return [Array<(Array<Project>, Fixnum, Hash)>] Array<Project> data, response status code and response headers
    def projects_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.projects_list ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ProjectsApi.projects_list, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ProjectsApi.projects_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProjectsApi.projects_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProjectsApi.projects_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ProjectsApi.projects_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ProjectsApi.projects_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ProjectsApi.projects_list, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 1
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ProjectsApi.projects_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && opts[:'order'] && !['published_date', 'modified_date', 'views', 'shares', 'downloads', 'cites'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of published_date, modified_date, views, shares, downloads, cites'
      end
      if @api_client.config.client_side_validation && opts[:'order_direction'] && !['asc', 'desc'].include?(opts[:'order_direction'])
        fail ArgumentError, 'invalid value for "order_direction", must be one of asc, desc'
      end
      # resource path
      local_var_path = "/projects"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'order_direction'] = opts[:'order_direction'] if !opts[:'order_direction'].nil?
      query_params[:'institution'] = opts[:'institution'] if !opts[:'institution'].nil?
      query_params[:'published_since'] = opts[:'published_since'] if !opts[:'published_since'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Project>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Public Projects Search
    # Returns a list of public articles
    # @param [Hash] opts the optional parameters
    # @option opts [CommonSearch] :search Search Parameters
    # @return [Array<Project>]
    def projects_search(opts = {})
      data, _status_code, _headers = projects_search_with_http_info(opts)
      return data
    end

    # Public Projects Search
    # Returns a list of public articles
    # @param [Hash] opts the optional parameters
    # @option opts [CommonSearch] :search Search Parameters
    # @return [Array<(Array<Project>, Fixnum, Hash)>] Array<Project> data, response status code and response headers
    def projects_search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectsApi.projects_search ..."
      end
      # resource path
      local_var_path = "/projects/search"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'search'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Project>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
