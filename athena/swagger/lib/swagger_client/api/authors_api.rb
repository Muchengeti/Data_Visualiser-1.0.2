=begin
#Figshare API

#Figshare apiv2. Using Swagger 2.0

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class AuthorsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Author details
    # View author details
    # @param author_id Author unique identifier
    # @param [Hash] opts the optional parameters
    # @return [AuthorComplete]
    def private_author_details(author_id, opts = {})
      data, _status_code, _headers = private_author_details_with_http_info(author_id, opts)
      return data
    end

    # Author details
    # View author details
    # @param author_id Author unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthorComplete, Fixnum, Hash)>] AuthorComplete data, response status code and response headers
    def private_author_details_with_http_info(author_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AuthorsApi.private_author_details ..."
      end
      # verify the required parameter 'author_id' is set
      if @api_client.config.client_side_validation && author_id.nil?
        fail ArgumentError, "Missing the required parameter 'author_id' when calling AuthorsApi.private_author_details"
      end
      if @api_client.config.client_side_validation && author_id < 1
        fail ArgumentError, 'invalid value for "author_id" when calling AuthorsApi.private_author_details, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/account/authors/{author_id}".sub('{' + 'author_id' + '}', author_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AuthorComplete')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthorsApi#private_author_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Authors
    # Search for authors
    # @param [Hash] opts the optional parameters
    # @option opts [PrivateAuthorsSearch] :search Search Parameters
    # @return [Array<Author>]
    def private_authors_search(opts = {})
      data, _status_code, _headers = private_authors_search_with_http_info(opts)
      return data
    end

    # Search Authors
    # Search for authors
    # @param [Hash] opts the optional parameters
    # @option opts [PrivateAuthorsSearch] :search Search Parameters
    # @return [Array<(Array<Author>, Fixnum, Hash)>] Array<Author> data, response status code and response headers
    def private_authors_search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AuthorsApi.private_authors_search ..."
      end
      # resource path
      local_var_path = "/account/authors/search"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'search'])
      auth_names = ['OAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Author>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthorsApi#private_authors_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
