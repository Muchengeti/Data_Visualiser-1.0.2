=begin
#Figshare API

#Figshare apiv2. Using Swagger 2.0

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class CommonSearch
    # Search term
    attr_accessor :search_for

    # Page number. Used for pagination with page_size
    attr_accessor :page

    # The number of results included on a page. Used for pagination with page
    attr_accessor :page_size

    # Number of results included on a page. Used for pagination with query
    attr_accessor :limit

    # Where to start the listing(the offset of the first result). Used for pagination with limit
    attr_accessor :offset

    # The field by which to order. Default varies by endpoint/resource.
    attr_accessor :order

    # Direction of ordering
    attr_accessor :order_direction

    # only return collections from this institution
    attr_accessor :institution

    # Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    attr_accessor :published_since

    # Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
    attr_accessor :modified_since

    # only return collections from this group
    attr_accessor :group

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'search_for' => :'search_for',
        :'page' => :'page',
        :'page_size' => :'page_size',
        :'limit' => :'limit',
        :'offset' => :'offset',
        :'order' => :'order',
        :'order_direction' => :'order_direction',
        :'institution' => :'institution',
        :'published_since' => :'published_since',
        :'modified_since' => :'modified_since',
        :'group' => :'group'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'search_for' => :'String',
        :'page' => :'Integer',
        :'page_size' => :'Integer',
        :'limit' => :'Integer',
        :'offset' => :'Integer',
        :'order' => :'String',
        :'order_direction' => :'String',
        :'institution' => :'Integer',
        :'published_since' => :'String',
        :'modified_since' => :'String',
        :'group' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'search_for')
        self.search_for = attributes[:'search_for']
      end

      if attributes.has_key?(:'page')
        self.page = attributes[:'page']
      end

      if attributes.has_key?(:'page_size')
        self.page_size = attributes[:'page_size']
      else
        self.page_size = 10
      end

      if attributes.has_key?(:'limit')
        self.limit = attributes[:'limit']
      end

      if attributes.has_key?(:'offset')
        self.offset = attributes[:'offset']
      end

      if attributes.has_key?(:'order')
        self.order = attributes[:'order']
      else
        self.order = "published_date"
      end

      if attributes.has_key?(:'order_direction')
        self.order_direction = attributes[:'order_direction']
      else
        self.order_direction = "desc"
      end

      if attributes.has_key?(:'institution')
        self.institution = attributes[:'institution']
      end

      if attributes.has_key?(:'published_since')
        self.published_since = attributes[:'published_since']
      end

      if attributes.has_key?(:'modified_since')
        self.modified_since = attributes[:'modified_since']
      end

      if attributes.has_key?(:'group')
        self.group = attributes[:'group']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@page.nil? && @page > 5000
        invalid_properties.push("invalid value for 'page', must be smaller than or equal to 5000.")
      end

      if !@page.nil? && @page < 1
        invalid_properties.push("invalid value for 'page', must be greater than or equal to 1.")
      end

      if !@page_size.nil? && @page_size > 1000
        invalid_properties.push("invalid value for 'page_size', must be smaller than or equal to 1000.")
      end

      if !@page_size.nil? && @page_size < 1
        invalid_properties.push("invalid value for 'page_size', must be greater than or equal to 1.")
      end

      if !@limit.nil? && @limit > 1000
        invalid_properties.push("invalid value for 'limit', must be smaller than or equal to 1000.")
      end

      if !@limit.nil? && @limit < 1
        invalid_properties.push("invalid value for 'limit', must be greater than or equal to 1.")
      end

      if !@offset.nil? && @offset > 5000
        invalid_properties.push("invalid value for 'offset', must be smaller than or equal to 5000.")
      end

      if !@offset.nil? && @offset < 1
        invalid_properties.push("invalid value for 'offset', must be greater than or equal to 1.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@page.nil? && @page > 5000
      return false if !@page.nil? && @page < 1
      return false if !@page_size.nil? && @page_size > 1000
      return false if !@page_size.nil? && @page_size < 1
      return false if !@limit.nil? && @limit > 1000
      return false if !@limit.nil? && @limit < 1
      return false if !@offset.nil? && @offset > 5000
      return false if !@offset.nil? && @offset < 1
      order_validator = EnumAttributeValidator.new('String', ["published_date", "modified_date", "views", "shares", "downloads", "cites"])
      return false unless order_validator.valid?(@order)
      order_direction_validator = EnumAttributeValidator.new('String', ["asc", "desc"])
      return false unless order_direction_validator.valid?(@order_direction)
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] page Value to be assigned
    def page=(page)

      if !page.nil? && page > 5000
        fail ArgumentError, "invalid value for 'page', must be smaller than or equal to 5000."
      end

      if !page.nil? && page < 1
        fail ArgumentError, "invalid value for 'page', must be greater than or equal to 1."
      end

      @page = page
    end

    # Custom attribute writer method with validation
    # @param [Object] page_size Value to be assigned
    def page_size=(page_size)

      if !page_size.nil? && page_size > 1000
        fail ArgumentError, "invalid value for 'page_size', must be smaller than or equal to 1000."
      end

      if !page_size.nil? && page_size < 1
        fail ArgumentError, "invalid value for 'page_size', must be greater than or equal to 1."
      end

      @page_size = page_size
    end

    # Custom attribute writer method with validation
    # @param [Object] limit Value to be assigned
    def limit=(limit)

      if !limit.nil? && limit > 1000
        fail ArgumentError, "invalid value for 'limit', must be smaller than or equal to 1000."
      end

      if !limit.nil? && limit < 1
        fail ArgumentError, "invalid value for 'limit', must be greater than or equal to 1."
      end

      @limit = limit
    end

    # Custom attribute writer method with validation
    # @param [Object] offset Value to be assigned
    def offset=(offset)

      if !offset.nil? && offset > 5000
        fail ArgumentError, "invalid value for 'offset', must be smaller than or equal to 5000."
      end

      if !offset.nil? && offset < 1
        fail ArgumentError, "invalid value for 'offset', must be greater than or equal to 1."
      end

      @offset = offset
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] order Object to be assigned
    def order=(order)
      validator = EnumAttributeValidator.new('String', ["published_date", "modified_date", "views", "shares", "downloads", "cites"])
      unless validator.valid?(order)
        fail ArgumentError, "invalid value for 'order', must be one of #{validator.allowable_values}."
      end
      @order = order
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] order_direction Object to be assigned
    def order_direction=(order_direction)
      validator = EnumAttributeValidator.new('String', ["asc", "desc"])
      unless validator.valid?(order_direction)
        fail ArgumentError, "invalid value for 'order_direction', must be one of #{validator.allowable_values}."
      end
      @order_direction = order_direction
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          search_for == o.search_for &&
          page == o.page &&
          page_size == o.page_size &&
          limit == o.limit &&
          offset == o.offset &&
          order == o.order &&
          order_direction == o.order_direction &&
          institution == o.institution &&
          published_since == o.published_since &&
          modified_since == o.modified_since &&
          group == o.group
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [search_for, page, page_size, limit, offset, order, order_direction, institution, published_since, modified_since, group].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
