=begin
#Figshare API

#Figshare apiv2. Using Swagger 2.0

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ArticlesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ArticlesApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ArticlesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ArticlesApi' do
    it 'should create an instance of ArticlesApi' do
      expect(@instance).to be_instance_of(SwaggerClient::ArticlesApi)
    end
  end

  # unit tests for article_details
  # View article details
  # View an article
  # @param article_id Article Unique identifier
  # @param [Hash] opts the optional parameters
  # @return [ArticleComplete]
  describe 'article_details test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for article_file_details
  # Article file details
  # File by id
  # @param article_id Article Unique identifier
  # @param file_id File Unique identifier
  # @param [Hash] opts the optional parameters
  # @return [PublicFile]
  describe 'article_file_details test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for article_files
  # List article files
  # Files list for article
  # @param article_id Article Unique identifier
  # @param [Hash] opts the optional parameters
  # @return [Array<PublicFile>]
  describe 'article_files test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for article_version_confidentiality
  # Public Article Confidentiality for article version
  # Confidentiality for article version
  # @param article_id Article Unique identifier
  # @param v_number Version Number
  # @param [Hash] opts the optional parameters
  # @return [ArticleConfidentiality]
  describe 'article_version_confidentiality test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for article_version_details
  # Article details for version
  # Article with specified version
  # @param article_id Article Unique identifier
  # @param v_number Article Version Number
  # @param [Hash] opts the optional parameters
  # @return [ArticleComplete]
  describe 'article_version_details test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for article_version_embargo
  # Public Article Embargo for article version
  # Embargo for article version
  # @param article_id Article Unique identifier
  # @param v_number Version Number
  # @param [Hash] opts the optional parameters
  # @return [ArticleEmbargo]
  describe 'article_version_embargo test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for article_versions
  # List article versions
  # List public article versions
  # @param article_id Article Unique identifier
  # @param [Hash] opts the optional parameters
  # @return [Array<Version>]
  describe 'article_versions test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for articles_list
  # Public Articles
  # Returns a list of public articles
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number. Used for pagination with page_size
  # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page
  # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
  # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
  # @option opts [String] :order The field by which to order. Default varies by endpoint/resource.
  # @option opts [String] :order_direction 
  # @option opts [Integer] :institution only return collections from this institution
  # @option opts [String] :published_since Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
  # @option opts [String] :modified_since Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
  # @option opts [Integer] :group only return collections from this group
  # @option opts [String] :resource_doi only return collections with this resource_doi
  # @option opts [Integer] :item_type Only return collections with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 4 - Fileset, 5 - Poster, 6 - Paper, 7 - Presentation, 8 - Thesis, 9 - Code, 12 - Preprint
  # @option opts [String] :doi only return collections with this doi
  # @return [Array<Article>]
  describe 'articles_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for articles_search
  # Public Articles Search
  # Returns a list of public articles, filtered by the search parameters
  # @param [Hash] opts the optional parameters
  # @option opts [ArticleSearch] :search Search Parameters
  # @return [Array<Article>]
  describe 'articles_search test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_author_delete
  # Delete article author
  # De-associate author from article
  # @param article_id Article unique identifier
  # @param author_id Article Author unique identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_article_author_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_authors_add
  # Add article authors
  # Associate new authors with the article. This will add new authors to the list of already associated authors
  # @param article_id Article unique identifier
  # @param authors Authors description
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_article_authors_add test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_authors_list
  # List article authors
  # List article authors
  # @param article_id Article unique identifier
  # @param [Hash] opts the optional parameters
  # @return [Array<Author>]
  describe 'private_article_authors_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_authors_replace
  # Replace article authors
  # Associate new authors with the article. This will remove all already associated authors and add these new ones
  # @param article_id Article unique identifier
  # @param authors Authors description
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_article_authors_replace test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_categories_add
  # Add article categories
  # Associate new categories with the article. This will add new categories to the list of already associated categories
  # @param article_id Article unique identifier
  # @param categories 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_article_categories_add test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_categories_list
  # List article categories
  # List article categories
  # @param article_id Article unique identifier
  # @param [Hash] opts the optional parameters
  # @return [Array<Category>]
  describe 'private_article_categories_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_categories_replace
  # Replace article categories
  # Associate new categories with the article. This will remove all already associated categories and add these new ones
  # @param article_id Article unique identifier
  # @param categories 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_article_categories_replace test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_category_delete
  # Delete article category
  # De-associate category from article
  # @param article_id Article unique identifier
  # @param category_id Category unique identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_article_category_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_confidentiality_delete
  # Delete article confidentiality
  # Delete confidentiality settings
  # @param article_id Article unique identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_article_confidentiality_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_confidentiality_details
  # Article confidentiality details
  # View confidentiality settings
  # @param article_id Article unique identifier
  # @param [Hash] opts the optional parameters
  # @return [ArticleConfidentiality]
  describe 'private_article_confidentiality_details test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_confidentiality_update
  # Update article confidentiality
  # Update confidentiality settings
  # @param article_id Article unique identifier
  # @param reason 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_article_confidentiality_update test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_create
  # Create new Article
  # Create a new Article by sending article information
  # @param article Article description
  # @param [Hash] opts the optional parameters
  # @return [Location]
  describe 'private_article_create test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_delete
  # Delete article
  # Delete an article
  # @param article_id Article unique identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_article_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_details
  # Article details
  # View a private article
  # @param article_id Article unique identifier
  # @param [Hash] opts the optional parameters
  # @return [ArticleCompletePrivate]
  describe 'private_article_details test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_embargo_delete
  # Delete Article Embargo
  # Will lift the embargo for the specified article
  # @param article_id Article unique identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_article_embargo_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_embargo_details
  # Article Embargo Details
  # View a private article embargo details
  # @param article_id Article unique identifier
  # @param [Hash] opts the optional parameters
  # @return [ArticleEmbargo]
  describe 'private_article_embargo_details test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_embargo_update
  # Update Article Embargo
  # Note: setting an article under whole embargo does not imply that the article will be published when the embargo will expire. You must explicitly call the publish endpoint to enable this functionality.
  # @param article_id Article unique identifier
  # @param embargo Embargo description
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_article_embargo_update test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_file
  # Single File
  # View details of file for specified article
  # @param article_id Article unique identifier
  # @param file_id File unique identifier
  # @param [Hash] opts the optional parameters
  # @return [PrivateFile]
  describe 'private_article_file test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_file_delete
  # File Delete
  # Complete file upload
  # @param article_id Article unique identifier
  # @param file_id File unique identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_article_file_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_files_list
  # List article files
  # List private files
  # @param article_id Article unique identifier
  # @param [Hash] opts the optional parameters
  # @return [Array<PrivateFile>]
  describe 'private_article_files_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_private_link
  # List private links
  # List private links
  # @param article_id Article unique identifier
  # @param [Hash] opts the optional parameters
  # @return [Array<PrivateLink>]
  describe 'private_article_private_link test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_private_link_create
  # Create private link
  # Create new private link for this article
  # @param article_id Article unique identifier
  # @param [Hash] opts the optional parameters
  # @option opts [PrivateLinkCreator] :private_link 
  # @return [Location]
  describe 'private_article_private_link_create test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_private_link_delete
  # Disable private link
  # Disable/delete private link for this article
  # @param article_id Article unique identifier
  # @param link_id Private link token
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_article_private_link_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_private_link_update
  # Update private link
  # Update existing private link for this article
  # @param article_id Article unique identifier
  # @param link_id Private link token
  # @param [Hash] opts the optional parameters
  # @option opts [PrivateLinkCreator] :private_link 
  # @return [nil]
  describe 'private_article_private_link_update test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_publish
  # Private Article Publish
  # - If the whole article is under embargo, it will not be published immediatly, but when the embargo expires or is lifted. - When an article is published, a new public version will be generated. Any further updates to the article will affect the private article data. In order to make these changes publicly visible, an explicit publish operation is needed.
  # @param article_id Article unique identifier
  # @param [Hash] opts the optional parameters
  # @return [Location]
  describe 'private_article_publish test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_reserve_doi
  # Private Article Reserve DOI
  # Reserve DOI for article
  # @param article_id Article unique identifier
  # @param [Hash] opts the optional parameters
  # @return [ArticleDOI]
  describe 'private_article_reserve_doi test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_update
  # Update article
  # Updating an article by passing body parameters
  # @param article_id Article unique identifier
  # @param article Article description
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_article_update test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_upload_complete
  # Complete Upload
  # Complete file upload
  # @param article_id Article unique identifier
  # @param file_id File unique identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_article_upload_complete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_article_upload_initiate
  # Initiate Upload
  # Initiate new file upload within the article. Either use link to provide only an existing file that will not be uploaded on figshare or use the other 3 parameters(md5, name, size)
  # @param article_id Article unique identifier
  # @param file 
  # @param [Hash] opts the optional parameters
  # @return [Location]
  describe 'private_article_upload_initiate test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_articles_list
  # Private Articles
  # Get Own Articles
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number. Used for pagination with page_size
  # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page
  # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
  # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
  # @return [Array<Article>]
  describe 'private_articles_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_articles_search
  # Private Articles search
  # Returns a list of private articles filtered by the search parameters
  # @param search Search Parameters
  # @param [Hash] opts the optional parameters
  # @return [Array<Article>]
  describe 'private_articles_search test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
