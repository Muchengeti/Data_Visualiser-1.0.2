=begin
#Figshare API

#Figshare apiv2. Using Swagger 2.0

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ProjectsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ProjectsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ProjectsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ProjectsApi' do
    it 'should create an instance of ProjectsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::ProjectsApi)
    end
  end

  # unit tests for private_project_article_delete
  # Delete project article
  # Delete project article
  # @param project_id Project unique identifier
  # @param article_id Project Article unique identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_project_article_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_article_details
  # Project article details
  # Project article details
  # @param project_id Project unique identifier
  # @param article_id Project Article unique identifier
  # @param [Hash] opts the optional parameters
  # @return [ProjectArticle]
  describe 'private_project_article_details test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_article_file
  # Project article file details
  # Project article file details
  # @param project_id Project unique identifier
  # @param article_id Project Article unique identifier
  # @param file_id File unique identifier
  # @param [Hash] opts the optional parameters
  # @return [PrivateFile]
  describe 'private_project_article_file test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_article_files
  # Project article list files
  # List article files
  # @param project_id Project unique identifier
  # @param article_id Project Article unique identifier
  # @param [Hash] opts the optional parameters
  # @return [Array<PrivateFile>]
  describe 'private_project_article_files test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_articles_create
  # Create project article
  # Create a new Article and associate it with this project
  # @param project_id Proejct unique identifier
  # @param article Article description
  # @param [Hash] opts the optional parameters
  # @return [Location]
  describe 'private_project_articles_create test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_articles_list
  # List project articles
  # List project articles
  # @param project_id Proejct unique identifier
  # @param [Hash] opts the optional parameters
  # @return [Array<Article>]
  describe 'private_project_articles_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_collaborator_delete
  # Remove project collaborator
  # Remove project collaborator
  # @param project_id Project unique identifier
  # @param user_id User unique identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_project_collaborator_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_collaborators_invite
  # Invite project collaborators
  # Invite users to collaborate on project or view the project
  # @param project_id Project unique identifier
  # @param collaborator viewer or collaborator role. User user_id or email of user
  # @param [Hash] opts the optional parameters
  # @return [ResponseMessage]
  describe 'private_project_collaborators_invite test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_collaborators_list
  # List project collaborators
  # List Project collaborators and invited users
  # @param project_id Project unique identifier
  # @param [Hash] opts the optional parameters
  # @return [Array<ProjectCollaborator>]
  describe 'private_project_collaborators_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_create
  # Create project
  # Create a new project
  # @param project Project  description
  # @param [Hash] opts the optional parameters
  # @return [Location]
  describe 'private_project_create test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_delete
  # Delete project
  # A project can be deleted only if: - it is not public - it does not have public articles.  When an individual project is deleted, all the articles are moved to my data of each owner.  When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project. 
  # @param project_id Project unique identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_project_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_details
  # View project details
  # View a private project
  # @param project_id Project unique identifier
  # @param [Hash] opts the optional parameters
  # @return [ProjectCompletePrivate]
  describe 'private_project_details test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_leave
  # Private Project Leave
  # Please note: project&#39;s owner cannot leave the project.
  # @param project_id Project unique identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_project_leave test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_note
  # Project note details
  # 
  # @param project_id Project unique identifier
  # @param note_id Note unique identifier
  # @param [Hash] opts the optional parameters
  # @return [ProjectNotePrivate]
  describe 'private_project_note test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_note_delete
  # Delete project note
  # 
  # @param project_id Project unique identifier
  # @param note_id Note unique identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_project_note_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_note_update
  # Update project note
  # 
  # @param project_id Project unique identifier
  # @param note_id Note unique identifier
  # @param note Note message
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_project_note_update test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_notes_create
  # Create project note
  # Create a new project note
  # @param project_id Project unique identifier
  # @param note Note message
  # @param [Hash] opts the optional parameters
  # @return [Location]
  describe 'private_project_notes_create test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_notes_list
  # List project notes
  # List project notes
  # @param project_id Project unique identifier
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number. Used for pagination with page_size
  # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page
  # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
  # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
  # @return [Array<ProjectNote>]
  describe 'private_project_notes_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_publish
  # Private Project Publish
  # Publish a project. Possible after all items inside it are public
  # @param project_id Project unique identifier
  # @param [Hash] opts the optional parameters
  # @return [ResponseMessage]
  describe 'private_project_publish test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_project_update
  # Update project
  # Updating an project by passing body parameters
  # @param project_id Project unique identifier
  # @param project Project description
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'private_project_update test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_projects_list
  # Private Projects
  # List private projects
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number. Used for pagination with page_size
  # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page
  # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
  # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
  # @option opts [String] :order The field by which to order. Default varies by endpoint/resource.
  # @option opts [String] :order_direction 
  # @option opts [String] :storage only return collections from this institution
  # @option opts [String] :roles Any combination of owner, collaborator, viewer separated by comma. Examples: \&quot;owner\&quot; or \&quot;owner,collaborator\&quot;.
  # @return [Array<ProjectPrivate>]
  describe 'private_projects_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for private_projects_search
  # Private Projects search
  # Search inside the private projects
  # @param [Hash] opts the optional parameters
  # @option opts [CommonSearch] :search Search Parameters
  # @return [Array<ProjectPrivate>]
  describe 'private_projects_search test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for project_articles
  # Public Project Articles
  # List articles in project
  # @param project_id Project Unique identifier
  # @param [Hash] opts the optional parameters
  # @return [Array<Article>]
  describe 'project_articles test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for project_details
  # Public Project
  # View a project
  # @param project_id Project Unique identifier
  # @param [Hash] opts the optional parameters
  # @return [ProjectComplete]
  describe 'project_details test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for projects_list
  # Public Projects
  # Returns a list of public projects
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number. Used for pagination with page_size
  # @option opts [Integer] :page_size The number of results included on a page. Used for pagination with page
  # @option opts [Integer] :limit Number of results included on a page. Used for pagination with query
  # @option opts [Integer] :offset Where to start the listing(the offset of the first result). Used for pagination with limit
  # @option opts [String] :order The field by which to order. Default varies by endpoint/resource.
  # @option opts [String] :order_direction 
  # @option opts [Integer] :institution only return collections from this institution
  # @option opts [String] :published_since Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
  # @option opts [Integer] :group only return collections from this group
  # @return [Array<Project>]
  describe 'projects_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for projects_search
  # Public Projects Search
  # Returns a list of public articles
  # @param [Hash] opts the optional parameters
  # @option opts [CommonSearch] :search Search Parameters
  # @return [Array<Project>]
  describe 'projects_search test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
